<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Документация по Cи, C++ и Visual C++</title>
</head>

<body background="../../background/bg6.gif" link="Black" vlink="Black" topmargin=2
leftmargin="5" bgcolor="Aqua">

<p align="center"><br>
<strong><big><font color="#FF0000" face="Arial">&nbsp;&nbsp; </font><font face="Arial" color="Maroon">Дополнительные операции языка</font></big></strong></p>
<div align="center"><center>

<table width="90%" height="132" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" height="132"><p align="left"><strong><font face="Arial" color="#0080FF"><big>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Стр. 9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </big></font><font
    face="Arial" color="#800000"><small>&lt; <a href="../visual_docum1.htm" target="_self"
    style="color: rgb(128,64,64)">оглавление </a>&gt;</small></font></strong></p>
    <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Мы уже упоминали о
    компактности языка Си, столь ценимой в системном
    программировании. Этому способствует и ряд
    вспомагатетельных операции. Вот список основных
    операций языка:</p>
    <p align="center"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +,&nbsp; &amp; ,&nbsp; \ ,&nbsp;
    ^ , | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp; ?: ,&nbsp; --,&nbsp; /, &nbsp; ++,&nbsp;
    &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;=, ++,&nbsp; !=, &lt;&lt; , &lt;
    &nbsp;&nbsp;&nbsp;&nbsp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;=, &amp;&amp;, !,&nbsp; ||, %
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
    ~, &gt;&gt;, -&gt; , - , =, *</strong></p>
    <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Операции
    уменьшения и увеличения. </strong></p>
    <p align="left"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong>В языке
    Си широко используются две нетрадиционные
    операции для увелечения и уменьшения значения
    переменной, обозначенные соответственно ++ и -- .
    Операция ++ прибавляет единицу к операнду, а --
    вычитает.Эти операции могут быть использованны и
    перед, и после своего операнда. Они оказывают
    разные действия в выражениях: в записи ++n
    увеличение происходит до использования значения
    n, а в n++ увеличение идет уже после того, как
    используется значение n. Если считать, что
    значение n равно 5, то переменная m в выражении m=++n
    ,будет иметь значение 6, а в выражение m=n++
    переменная m равна 5, в том и этом случае
    переменная n будет равняться 6. Первый пример в
    точности соответствует следующей
    последовательности операторов n=n+1; m=n; а второй
    последовательности m=n; n=n+1; Операция действует
    аналагично.Обе операции имеют самый низкий
    приоритет и выполняются после бинарных операций
    + и -. Рассмотрим пример 3.1 . </p>
    <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Пример 3.1</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="56%">
      <tr>
        <td width="100%"><strong>/*определить двузначные целые
        числа,<br>
        которые делятся на сумму своих цифр*/<br>
        #include &lt;stdio.h&gt;<br>
        main()<br>
        { <br>
        int a,b,k,s,c;<br>
        &nbsp;&nbsp;&nbsp; k=0;a=1;<br>
        &nbsp;&nbsp; while(a&lt;=9)<br>
        { <br>
        b=0;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; while(b&lt;=9)<br>
        {<br>
        s=a+b;<br>
        c=a*10+b;<br>
        if(c%s==0)<br>
        {<br>
        &nbsp; printf(&quot;%d&quot;,c);<br>
        k++;<br>
        }<br>
        b++;<br>
        }<br>
        a++; printf(&quot;\n&quot;);<br>
        }<br>
        &nbsp;&nbsp; printf(&quot;всего: %d\n&quot;, k);<br>
        }&nbsp; </strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <strong>Поразрядные логические операции </strong>предназначенные
    для работы с отдельными битами целого числа или
    символа.</font></p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="52%">
      <tr>
        <td width="100%"><p align="left"><font face="Times New Roman" color="#000000"><strong>&amp;
        -&nbsp; поразрядное И&nbsp;&nbsp;&nbsp;<br>
        ^ -&nbsp;&nbsp; поразрядное исключающее ИЛИ<br>
        &gt;&gt; - сдвиг вправо&nbsp;<br>
        | -&nbsp;&nbsp;&nbsp;&nbsp; поразрядное ИЛИ&nbsp;<br>
        &lt;&lt; - сдвиг в лево&nbsp;&nbsp;<br>
        ~ -&nbsp;&nbsp;&nbsp; инверсия</strong></font></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Поразрядная
    операция <strong>И (&amp;)</strong> часто используется для
    выделения некотрой группы двоичных разрядов,
    напрмер <strong>n=n&amp;0177&nbsp; </strong>устанвливает в нуль
    все двоичные разряды числа n, кроме семи младших.
    Операция <strong>ИЛИ( | ) </strong>используется для
    установки отдельных разрядов в единицу. Напрмер.
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>m=m |
    0xF0F; </strong>&quot;включает&quot; 11,10, 9,8,3,2,1 и&nbsp; 0 разряды
    числа m. Операции &lt;&lt; и &gt;&gt; выполняют сдвиг
    операдна влево или вправо на заданное число
    разрядов. Напрмер, <strong>m&lt;&lt;3 </strong>сдигает
    значение m на 3 разряда влево, заполняя
    освобождающиеся младшие разряды нулями. Унарная
    операция <strong>~ </strong>выполняет инверсию двоичных
    разрядов числа(символа), т.е. преобразует каждый
    единичный бит в нулевой и наоборот. Применение
    некоторых поразрядных операций покажем на
    примерах. В программе на прмере 3.2 исходное число
    511 дано в шестнадцатиричной форме: <strong>m= 0X|FF; </strong>Напомним,
    что написанная перед константой число 0
    указывает на восьмеричное число, а <strong>0X</strong> на
    шестнадцатиричное. Для выода результата
    предусмотрена функция <strong>PRINT. </strong>Она для
    удобства анализа результатов печатает числа в
    шестнадцатиричном, восьмеричном и десятиричном
    форматах, используя для этого спецификацию <strong>&nbsp;
    x, o ,d. </strong>Остальные действия в программе
    коментируются и дополнительных пояснений не
    надо. </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;
    Пример 3.2 </font></p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="76%">
      <tr>
        <td width="100%"><strong>/*поразрядные логические операции*/<br>
        &nbsp; #include &lt;stdio.h &gt;<br>
        &nbsp; PRINT(n)<br>
        &nbsp; int n;<br>
        &nbsp;&nbsp; {<br>
        printf(&quot;%5x %5o %5d \n&quot;,n,n,n);<br>
        }<br>
        &nbsp; main()<br>
        {<br>
        int m,n;<br>
        m=0X1F3; PRINT(m); /*16- ричное число*/<br>
        n=m&amp;0177 PRINT(n); /* выделение 7 мл.бит*/<br>
        n=m|013; PRINT(n); /*установка 4 мл.бит*/<br>
        n=m&gt;&gt;4 ; PRINT(n); /*сдвиг вправо*/<br>
        m=n&lt;&lt;3 ; PRINT(m); /*сдвиг влево*/ <br>
        }<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;
    Следующяя программа (прмер 3.3), используя команду
    сдвига числа вправо на один бит (<strong>m=n&gt;&gt;</strong>1;)
    и выделения младшего разряда числа (<strong>m&amp;01</strong>),
    подсчитывает кол-во единичных битов исходного
    числа и печатает результат. </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;
    Пример&nbsp; 3.3 </font></p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="49%">
      <tr>
        <td width="100%"><strong>/* подсчет единиц */<br>
        #include &lt;stdio.h&gt;<br>
        &nbsp;&nbsp;&nbsp; main()<br>
        {<br>
        int m,k;<br>
        k=0;<br>
        m=0xf0f;<br>
        while(m!=0)<br>
        {<br>
        if(m&amp;01)k++;<br>
        m=m&gt;&gt;1;<br>
        <br>
        }<br>
        printf(&quot;k=%d\n&quot;,k);<br>
        }<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000"><small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </small><strong>Операции присваивания и выражения.</strong>
    Выражение вида <strong>i=i+b, </strong>где левая часть
    повторяется в правой части, могут быть заменены в
    сжатой форме: <strong>i+ =b</strong>. При этом используется
    операция присваивания вида +=, которая означает
    буквально &quot;увеличить i на b&quot;<strong>. </strong>Для
    большинства бинарных операций допускается
    запись вида <strong>op=</strong>, где <strong>op </strong>- одна из
    операций: + - / % | ^ &amp; &lt;&lt;&gt;&gt;. Если E1op=E2
    эквивалентно <strong>E1=(E1)op(E2). </strong>Обратите внимание
    на скобки вокруг E2; присвание&nbsp; <strong>x*=y+1 </strong>фактически
    означает <strong>x=x*(y+1), </strong>а не <strong>x=x*y+1. </strong>В
    качестве иллюстраций, поясняющей сказанное,
    рассмотрим программу (пример 3.4), в которой по
    заданному натуральному числу <strong>n </strong>строится
    число <strong>m, </strong>написанное теми же цифрами, что
    и n, но взятыми в обратном порядке. Правду говоря,
    запись <strong>m=m*10+z </strong>более прозрачна, чем
    непривычная последовательность <strong>m*=10; m+=z. </strong></font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Пример 3.4 </font></p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="55%">
      <tr>
        <td width="100%"><strong>#include stdio.h<br>
        &nbsp; main()<br>
        {<br>
        int n,z,m=0;<br>
        printf(&quot;введи n n\&quot;);<br>
        scanf(&quot;%d&quot;,&amp;n);<br>
        while(n!=0)<br>
        {<br>
        z=n%10; <br>
        n/=10;<br>
        m*=10;<br>
        m+=z<br>
        }<br>
        printf(&quot;m=%d\n&quot;,m);<br>
        }<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Условная
    операция. </strong>Фактически она представляет собой
    сокращенную форму оператора <strong>if - then - else</strong>, и
    в общем виде записывается так: <strong>выражение1?
    выражение2? выражение3?. </strong>Если
    &quot;выражение1&quot; не равно нулю, то результатом
    операции будет значение &quot;выражение2&quot;, в
    противном случае - значение &quot;выражение3&quot; .
    Условная операция, называемая иногда <strong>тенарной</strong>,
    определяет обычное выражение. которое может. в
    частности, быть использовано в операторе
    присваивания.&nbsp; Таким образом, вместо <strong>if(x &gt;
    y) max=c; else max=y; </strong>достаточно написать: <strong>max=(x&gt;y)&amp;
    x:y. </strong>Скобки вокруг &quot;выражения1&quot; ставить
    не обязательно, так как приоритет операции <strong>:? </strong>очень
    низкий, ниже он только у присваивания. Условная
    операция позволяет писать долее короткие
    программы. Вот как выглядит в программе (пример
    3.5) цикл для печати квадратов натуральныз чисел
    от 1 до m, по 6 чисел в строке; каждое число занимает
    5 позиций и колонки отделяются одним пробелом, а
    каждая строка, включая последнюю, заканчивается
    символом перевода на новую строку
    &quot;печатается&quot; после каждого шестого элемента
    и после m-го. За любыми другими элементами
    выводится один пробел. </p>
    <p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Пример 3.5</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="70%">
      <tr>
        <td width="100%"><strong>/*квадраты натуральных чисел*/<br>
        main()<br>
        {<br>
        int m,i=1;scanf(&quot;%d&quot;,&amp;m);<br>
        while(i_=m)<br>
        {<br>
        printf(&quot;5%d%c&quot;,i*i,(i%6==0 || i==m)? '\n':' ');<br>
        i++;<br>
        }<br>
        }<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="center"><font face="Arial" color="#804040"><small><strong>&lt; <a
    href="book008.htm" target="_self" style="color: rgb(128,64,64)">Назад</a> &gt;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; <a href="book010.htm"
    style="color: rgb(128,64,64)">Дальше</a> &gt;</strong></small></font><br>
    </td>
  </tr>
</table>
</center></div>
</body>
</html>
