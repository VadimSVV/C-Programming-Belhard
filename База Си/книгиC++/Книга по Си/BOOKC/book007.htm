<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Документация по Cи, C++ и Visual C++</title>
</head>

<body background="../../background/bg6.gif" link="Black" vlink="Black" topmargin=2
leftmargin="5" bgcolor="Aqua">

<p align="center"><br>
<strong><big><font color="#FF0000" face="Arial">&nbsp;&nbsp; </font><font face="Arial" color="Maroon">КЛАССЫ ПАМЯТИ</font><font face="Arial" color="#FFFF80">&nbsp;</font><font
color="#FF0000" face="Arial"> </font></big></strong></p>
<div align="center"><center>

<table width="90%" height="132" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" height="132"><p align="left"><strong><font face="Arial" color="#0080FF"><big>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Стр.
    7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </big></font><font
    face="Arial" color="#800000"><small>&lt; <a href="../visual_docum1.htm" target="_self"
    style="color: rgb(128,64,64)">оглавление </a>&gt;</small></font></strong></p>
    <p align="left">&nbsp;&nbsp; <font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;Все
    переменные в программе характеризуются не
    только типом, но и классом памяти. В языке Си
    существует четыре класса памяти: автоматический <strong>(automatic)</strong>,
    регистровый<strong>(register)</strong>, статический<strong>(static)</strong>
    и внешний<strong>(external). </strong></font></p>
    <p align="left"><font face="Times New Roman" color="#000000"><strong>Автоматические
    </strong>переменные в программе можно описать так: </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <strong>auto A; auto char c1; auto int x= 125; </strong></font></p>
    <p align="left"><font face="Times New Roman" color="#000000">Если мы этим не
    пользовались, то только потому что опущенный
    описатель <strong>&nbsp;&nbsp;&nbsp;&nbsp; auto</strong> используется
    по умолчанию. Зона действия автоматической
    переменной ограничена блоком или функцией, где
    она описана. Она начинает существовать после
    обращения к функции и исчезает после выхода из
    нее. Таким образом автоматические переменные не
    занимают область в памяти. Значение
    автоматической переменной не может быть
    изменено другими функциями и в этих функциях
    может находится переменные с таким же именем.
    Проанализируем результаты работы следующей
    программы.</font></p>
    <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Пимер 2.3</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="53%">
      <tr>
        <td width="100%"><strong>#include &lt;stdio.h&gt;<br>
        main()<br>
        {<br>
        int t;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int t=2;<br>
        {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int t=3;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;%d\n&quot;,t);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;%d\n&quot;,t);<br>
        }<br>
        &nbsp;&nbsp; printf(&quot;%d\n&quot;,t);<br>
        <br>
        }</strong></td>
      </tr>
    </table>
    </center></div><p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    В этой программе перменная <strong>t</strong> описана в
    нескольких блоках, в каждом блоке она может
    принимать разные значения не зависимо от других.
    С ней могут выполнятся разные операции. В нашей
    програамме значение переменной&nbsp;&nbsp; <strong>t </strong>выводится
    на дисплей. В нашем случае выведятся числа <strong>2,
    3, 746</strong>. Число <strong>746</strong> - так называемое число
    &quot;мусор&quot; оно такое так как ей не присваивали
    значение в первом блоке. </p>
    <p align="left"><strong>Внешние</strong> переменные вводятся
    &nbsp; как нечто противоположное автоматическим.
    Это <strong>глобальные </strong>переменные и к ним можно
    обращаться именами из любой функции. Поскольку
    внешеие переменные доступны везде, их можно
    использовать для связи между функциями, не
    пренебрегая механизму формальных параметров. </p>
    <p align="left">&nbsp;&nbsp; Пример 2.4</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="70%">
      <tr>
        <td width="100%"><strong><br>
        #include &lt;stdio.h&gt;<br>
        int x=145;/*Описание внешней переменной*/<br>
        main()<br>
        {<br>
        extern int x,y;<br>
        &nbsp;&nbsp; printf(&quot;x=%d y=%d \n&quot;,x,y);<br>
        }<br>
        int y=541; /*Описание внешней переменной*/<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman">&nbsp; Внешнии
    переменные могут определятся вне квкой-либо
    функции; при этом</font> выделяется фактическая
    память. В любой другой функции, обращающейся к
    этим переменным, они должны описываться;
    делается явно с помощью описателя <strong>extern</strong>.
    Обычно поступают так, как показано на прмере 2.5.
    Все внешние переменные размещают в начале
    исходного модуля (вне всяких функций!), опуская
    дополнительные описания со словом extern внутри
    функций. Конечно, если внешняя переменная и
    функция, которая ее использует, размещены в
    разных файлах, описывать эту переменную в
    функции необходиммо. Но самым важным способом
    является описание каждой внешней перемнной с
    ключевого слова extern в любой функции, которая ее
    использует. А еще лучше избегать применения
    внешних переменных, так как они часто служат
    источником труднообнаруживаемых ошибок. </p>
    <p align="left">Пример 2.5</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="60%">
      <tr>
        <td width="100%"><strong>int x=3; /*описание внешней переменной
        */<br>
        /* увелечение x */<br>
        int plus1()<br>
        {<br>
        &nbsp;&nbsp; x=x+1;<br>
        &nbsp;&nbsp; printf(&quot;прибавляем единицу: x=%d\n&quot;,x);<br>
        }<br>
        /*уменьшение x */<br>
        int mainus1()<br>
        {<br>
        x=x-1;<br>
        printf(&quot;вычитаем единицу: x=%d\n&quot;,x);<br>
        }<br>
        main()<br>
        {<br>
        &nbsp; printf(&quot;начальное значение x=%d\n&quot;,x);<br>
        &nbsp; plus1();<br>
        &nbsp; minus1();<br>
        &nbsp; minus1();<br>
        &nbsp; printf(&quot;конечное значение x=%d \n&quot;, x);<br>
        }</strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;
    <strong>Статические </strong>переменные, подобно
    автоматическим, локальны в той функции или блоке,
    где они описаны. Разница заключается в том, что
    статические переменные не исчезают, когда
    функция (блок)</font><small><font face="Arial" color="#804040"><strong> </strong></font></small><font
    face="Times New Roman" color="#000000">завершает работу, и их
    значения сохраняются для последующих вызовов
    функции. Описание статических переменных
    выглядит так:</font></p>
    <p align="center"><font face="Times New Roman" color="#000000">&nbsp;&nbsp; <strong>static
    char c; static int a=1;</strong></font></p>
    <p align="left"><font face="Times New Roman" color="#000000">Рассмотрим
    пример 2.6, в котором переменная объявлена как
    статическая.</font></p>
    <p>&nbsp; Пример 2.6</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="44%">
      <tr>
        <td width="100%"><strong>*статические переменные*/<br>
        #include &lt;stdio.h&gt;<br>
        plus1() <br>
        {<br>
        static int x=0;<br>
        x=x+1;<br>
        printf(&quot;x=%d\n&quot;,x);<br>
        }<br>
        &nbsp; main()<br>
        {<br>
        plus1();<br>
        plus1(); <br>
        plus1();<br>
        }</strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;
    Начальное значение равное нулю присваивает
    переменной x только один раз. Затем в программе
    main, функция <strong>plus1() </strong>несколько раз
    запускается, так как при каждом запуске функции
    аргумент x не изменяется, а оставляет значение из
    предыдущей функции. Таким образом повторение
    функции<strong> plus1 </strong>обеспечивает увелечение
    переменной x на 1 при каждом запуске 1, 2, 3 ...</font></p>
    <p align="left"><font face="Times New Roman" color="#000000"><strong>Регистровые
    </strong>переменные объявляются в программе с
    помощью ключевого слова <strong>register</strong> и по
    замыслу автора языка Си должны хранится в сверх
    быстрой памяти ЭВМ - регистрах. Используются
    аналогично автоматическим переменным.
    Целесообразность их применения для увелечения
    быстродействия программы представляется в
    большинстве случаев сомнительной.</font></p>
    <p align="center"><font face="Arial" color="#804040"><small><strong>&lt; <a
    href="book006.htm" target="_self" style="color: rgb(128,64,64)">Назад </a>&gt;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; <a href="book008.htm"
    style="color: rgb(128,64,64)">Дальше</a> &gt;</strong></small></font><br>
    </td>
  </tr>
</table>
</center></div>
</body>
</html>
