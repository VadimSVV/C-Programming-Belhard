<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Документация по Cи, C++ и Visual C++</title>
</head>

<body background="../../background/bg6.gif" link="Black" vlink="Black" topmargin=2
leftmargin="5" bgcolor="Aqua">

<p align="center"><strong><big><font color="#FF0000" face="Arial">&nbsp;&nbsp; </font><font face="Arial" color="Maroon">Определение функции</font></big></strong></p>
<div align="center"><center>

<table width="90%" height="132" border="0" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" height="132"><p align="left"><strong><font face="Arial" color="#0080FF"><big>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Стр.
    6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </big></font><font
    face="Arial" color="#800000"><small>&lt; <a href="../visual_docum1.htm" target="_self"
    style="color: rgb(128,64,64)">оглавление </a>&gt;</small></font></strong></p>
    <p align="left">&nbsp;&nbsp; <font face="Times New Roman" color="#000000">&nbsp;В
    библиотеке стандартных подпрограмм языка Си
    имеется много полезных библиотечных функций. Для
    нас особый интерес представляютя функции,
    которые мы определяем сами. Не следует думать,
    что выделение функции как самостоятельной
    единицы целесообразно только тогда, когда к ней
    приходится многократно обращаться. Часто
    встречаются функции всего в несколько строк,
    вызываемые единожды, но оформление как функции
    только для более ясного написания. </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Определение функции состоит из двух частей: <strong>заголовка
    и тела. </strong>Заголовок определяет имя функции, ее
    тип и формальные параметры, тело определяет
    действия над данными, выполняемые функцией.
    Возращающее функцией значение передается в
    вызывающюю программу опрератором <strong>return&nbsp;&nbsp; </strong>(выражение).
    Значение &quot;выражения&quot; и есть результат
    функции (возращаемого значения). Если в нашей
    программе функция физически следует за
    вызывающей ее функцией main, то надо в последней
    объявить функцию <strong>внешней </strong>с помощью
    описателя <strong>extern: extern int fun(); </strong>или еще проще<strong>
    int fun();. </strong>В противном случае при компиляции
    будет выдана ошибка. Всякая функция имеет вид:</font>
    &nbsp;&nbsp;&nbsp;&nbsp; </p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="67%">
      <tr>
        <td width="100%"><strong>[тип] имя([список формальных
        параметров])<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; описания формальных параметров;<br>
        {<br>
        описания;<br>
        операторы;<br>
        }<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Здесь квадратные скобки указываютя, что
    заключенная в них конструкция может
    отсутствовать. По умолчанию тип функции целый.
    Описание формальных параметров расположено
    между списком параметров и левой скобкой. Каждое
    описание заканчивается точкой с запятой.
    Формальные параметры функции полностью
    локализированы в ней и недоступны для других
    функций. Аргументы функции передаются по
    значению, а не их адреса. </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp; Рассмотрим
    пример программы возведения числа в степень. Для
    этого составим функцию <strong>power(t,n); </strong>В нашей
    реализации функция power предшествует головной
    программе, поэтому она предварительно не
    объявлена. Описание формальных параметров
    функции происходит в заголовке <strong>(int t,n;) </strong>Оператор
    <strong>int p=1;&nbsp; </strong>в теле функции определяет
    переменную <strong>p</strong> целого типа и присваивает
    ей начальное значение равное 1. Выражение<strong> int
    p=1;</strong> в точности эквиалентно &nbsp;
    последовательности операторов <strong>int p; p=1; </strong>Обращение
    к функции задает один из аргументов стнадартной
    функции <strong>printf </strong>в программе <strong>main. </strong>Выражение
    power(t,n) предписывает вызов функции. Когда
    программа main достигает этой точки, то все
    управление передается функции power. Операторы ,
    содержащиеся в теле функции power фактически
    оперируютя данными. Когда достигается оператор <strong>return</strong>
    , осуществляется переход в ту точку программы main,
    из которой мы пришли в power. Значение, вычисляемое
    функцией power, передается в головную программу с
    помощью оператора<strong> return(p)</strong>. В скобках в
    общем случае может быть любое значение. </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Прмер 2.0 </font></p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="67%">
      <tr>
        <td width="100%"><strong>/*Функция y=t**n*/<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int power(t,n);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int t,n;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
        int p=1;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(n!=0) <br>
        &nbsp;&nbsp; {<br>
        if(n%2 !=0) p=p*t;<br>
        n=n/2;<br>
        t=t*t; <br>
        &nbsp;&nbsp; }<br>
        return(p);<br>
        }<br>
        &nbsp;&nbsp;&nbsp; /*Возведение в степень- головная
        программа*/<br>
        &nbsp;&nbsp; #include &lt;stdio.h&gt;<br>
        &nbsp;&nbsp; main()<br>
        {<br>
        &nbsp;&nbsp;&nbsp;&nbsp; int a,n; <br>
        &nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;Введи a,n \n&quot;);<br>
        &nbsp;&nbsp;&nbsp;&nbsp; scanf(&quot;%d %d&quot;,&amp;a,&amp;n);<br>
        &nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;%d в степени %d = %d&quot;,a,n<br>
        power(a,n));<br>
        }</strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;
    <strong>&nbsp; Рекурсия.</font><font face="Arial" color="#804040"><small> </small></font></strong></p>
    <p align="left"><font face="Arial" color="#804040"><strong><small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </small></strong></font><font face="Times New Roman" color="#000000">В языке Си
    можно использовать рекурсивно, т.е. функция может
    вызывать сама себя. Простейший пример 2.1, где
    функция main вызывает сама себя остановить которую
    можно только с помощью CTRL+C&nbsp; - ^С. При
    рекурсивном обращении к функции - создается
    новый экземпляр данных. </font></p>
    <p align="left"><font face="Times New Roman" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Пример 2.1</font></p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="42%">
      <tr>
        <td width="100%"><strong>#include &lt;stdio.h&gt;<br>
        main()<br>
        {<br>
        printf(&quot;проверка рекурсии \n&quot;);<br>
        main();<br>
        }</strong></td>
      </tr>
    </table>
    </center></div><p align="left"><font face="Times New Roman" color="#000000">Следущий
    пример 2.2 использует рекурсию для вычисления <strong>k!</strong>
    . При первом вызове <strong>fact(i) </strong>, если не равно 1,
    функция порождает выражение <strong>i*fact(i-1);</strong> в
    свою очередь, вызов <strong>fact(i-1)</strong> производит <strong>(i-1)*fact(i-2)</strong>,
    что вместе с ранее полученным результатом дает <strong>i*(i-1)*fact(i-2).</strong>
    Рекурсия закончистся, как только следующий вызов
    функции получит аргумент, равный еденице.
    Нетрудно сообразить, что в конечном счете мы
    получим требуемое произведение. </font></p>
    <p align="left">Прмер 2.2</p>
    <div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="59%">
      <tr>
        <td width="100%"><strong>#include &lt;stdio.h&gt;<br>
        int fact(k);<br>
        int k;<br>
        {<br>
        &nbsp; if(k==1)<br>
        return(1);<br>
        &nbsp; else <br>
        &nbsp;&nbsp;&nbsp; return(k*fact(k-1));</strong><br>
        <strong>}</strong> <br>
        <strong>main()<br>
        {<br>
        int i=1;<br>
        &nbsp;&nbsp;&nbsp; printf(&quot;проверка рекурсии\n&quot;);<br>
        &nbsp;&nbsp;&nbsp; while(i&lt;8)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
        printf(&quot;%d!= %d\n&quot;,i, fact(i));<br>
        i=i+1;<br>
        }<br>
        }<br>
        </strong></td>
      </tr>
    </table>
    </center></div><p align="center"><font face="Arial" color="#804040"><small><strong>&lt; <a
    href="book005.htm" target="_self" style="color: rgb(128,64,64)">Назад</a> &gt;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; <a href="book007.htm"
    style="color: rgb(128,64,64)">Дальше</a> &gt;</strong></small></font> </td>
  </tr>
</table>
</center></div>

<p align="center"><!--#include virtual="/banner.htm" --> </p>
</body>
</html>
