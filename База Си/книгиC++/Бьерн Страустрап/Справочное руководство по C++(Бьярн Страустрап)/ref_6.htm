<html><head>
<title>Операторы. Справочное руководство по C++</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<a name=9></a>
<h3> 9. Операторы </h3>
<p align=justify>Операторы выполняются последовательно во всех случаях кроме особо оговоренных.
<a name=9_1></a>
<h4>9.1 Оператор выражение</h4>
<p align=justify>Большинство операторов  является операторами  выражение,  которые имеют вид
<pre>
	выражение ;
</pre>
<p align=justify>Обычно операторы  выражение являются  присваиваниями  и  вызовами функций.
<a name=9_2></a>
<h4>9.2 Составной оператор, или блок</h4>
<p align=justify>Составной оператор  (называемый также  "блок", что  эквивалентно)
дает возможность использовать несколько операторов в том месте, где
предполагается использование одного:
<pre>
	составной_оператор:
	     { список_описаний opt список_операторов opt }
	список_описаний:
	     описание
	     описание список_описаний
	список_операторов:
	     оператор
	     оператор список_операторов
</pre>
<p align=justify>Если какой-либо  из идентификаторов  в списке_описаний  был ранее
описан, то  внешнее описание  выталкивается  на  время  выполнения
блока, и снова входит в силу по его окончании.
<p align=justify>Каждая инициализация  auto или   register переменных производится
всякий раз при входе в голову блока. В блок делать передачу; в этом
случае  инициализации  не  выполняются.  Инициализации  переменных,
имеющих класс памяти static (<a href=ref_2.htm#4_2>#4.2</a>) осуществляются только один раз в
начале выполнения программы.
<a name=9_3></a>
<h4>9.3 Условный оператор</h4>
<p align=justify>Есть два вида условных операторов
<pre>
	if ( выражение ) оператор
	if ( выражение ) оператор else оператор
</pre>
<p align=justify>В обоих  случаях вычисляется  выражение, и  если оно  не ноль, то
выполняется первый подоператор. Во втором случае второй подоператор
выполняется, если  выражение есть  0. Как  обычно,  неоднозначность
"else"  разрешается   посредством  того,  что  else  связывается  с
последним встреченным if, не имеющим else.
<a name=9_4></a>
<h4>9.4 Оператор whilе</h4>
<p align=justify>Оператор while имеет вид
<pre>
	while ( выражение ) оператор
</pre>
<p align=justify>Выполнение   подоператора повторяется,  пока  значение  выражения
остается ненулевым.  Проверка выполняется  перед каждым  выполнением
оператора.
<a name=9_5></a>
<h4>9.5 Оператор dо</h4>
<p align=justify>Оператор do имеет вид
<pre>
	do оператор while (выражение);
</pre>
<p align=justify> Выполнение   подоператора  повторяется до тех пор, пока значение
выражения не  станет  нулем.  Проверка  выполняется  после  каждого
выполнения оператора.
<a name=9_6></a>
<h4>9.6 Оператор for</h4>
<p align=justify>Оператор for имеет вид
<pre>
	for (  выражение_1 opt  ; выражение_2  opt ; выражение_3 opt )
	     оператор
</pre>
   Этот оператор эквивалентен следующему:
<pre>
	выражение_1;
	while                                            (выражение_2)
	                                                             {
	                                                      оператор
	                                                  выражение_3;
	  }
</pre>
<p align=justify>Первое выражение  задает инициализацию  цикла;  второе  выражение
задает осуществляемую  перед каждой  итерацией проверку, по которой
производится выход  из  цикла,  если  выражение  становится  нулем;
третье выражение  часто задает приращение, выполняемое после каждой
итерации.
<p align=justify>Каждое  или   все  выражения   могут  быть   опущены.  Отсутствие
выражения_2 делает  подразумеваемое while-предложение  эквивалентным
while(1);  остальные  опущенные  выражения  просто  пропускаются  в
описанном выше расширении.
<a name=9_7></a>
<h4>9.7 Оператор switch</h4>
<p align=justify>Оператор  switch   вызывает  передачу   управления  на   один  из
нескольких операторов в зависимости от значения выражения. Он имеет
вид
<pre>
	switch ( выражение ) оператор
</pre>
<p align=justify> Выражение  должно быть  целого типа  или типа  указателя.  Любой
оператор внутри  оператора  может  быть  помечен  одним  или  более
префиксом case следующим образом:
<pre>
	case      константное_выражение :
</pre>
где константное  выражение должно иметь тот же тип что и выражение-
переключатель; производятся  обычные арифметические преобразования.
В одном операторе switch никакие две константы, помеченные case, не
могут  иметь   одинаковое  значение.  Константные  выражения  точно
определяются в <a href=ref_8.htm#15>#15</a>.
<p align=justify>Может также быть не более чем один префикс оператора вида
<pre>
	default :
</pre>
<p align=justify>Когда  выполнен   оператор  switch,   проведено  вычисление   его
выражения и  сравнение его  с каждой  case константой. Если одна из
констант равна  значению выражения,  то  управление  передается  на
выражение, следующее  за подошедшим  префиксом case.  Если  никакая
case константа  не соответствует выражению, и есть префикс default,
то управление  передается на  выражение, которому  он предшествует.
Если нет  соответствующих вариантов  case  и default отсутствует, то
никакой из операторов в операторе switch не выполняется.
<p align=justify>Префиксы  case    и  default  сами  по  себе  не  изменяют  поток
управления, который  после задержки  идет дальше, перескакивая через
эти префиксы. Для выхода из switch см. break, <a href=ref_6.htm#9_8>#9.8</a>.
<p align=justify>Обычно зависящий  от switch оператор является составным. В голове
этого   оператора   могут   стоять   описания,   но   инициализации
автоматических и регистровых переменных являются безрезультатными.
<a name=9_8></a>
<h4>9.8 Оператор break</h4>
<p align=justify>Оператор
<pre>
	break ;
</pre>
прекращает выполнение  ближайшего охватывающего while,  do, for или
switch   оператора; управление передается на оператор, следующий за
законченным.
<a name=9_9></a>
<h4>9.9 Оператор contiпие</h4>
<p align=justify>Оператор
<pre>
	continue ;
</pre>
вызывает передачу  управления  на  управляющую  продолжением  цикла
часть наименьшего  охватывающего оператора  while, do  или for;  то
есть на конец петли цикла. Точнее, в каждом из операторов
<pre>
	while (...)         do                  for (...)
	  {                   {                   {
	    ...                 ...                 ...
	    contin:;            contin:;            contin:;
	  }                   }                   }
	                    while (...);
</pre>
continue эквивалентно  goto  contin.  (За  contin:  следует  пустой
оператор, <a href=ref_6.htm#9_13>#9.13</a>.)
<a name=9_10></a>
<h4>9.10 Оператор returп</h4>
<p align=justify>Возврат из  функции  в  вызывающую  программу  осуществляется  с
помощью оператора return, имеющего один из двух видов:
<pre>
	 return ;
	 return выражение ;
</pre>
<p align=justify> Первый  может использоваться  только в функциях, не возвращающих
значения, т.е.  в функциях  с типом  возвращаемого  значения  void.
Вторая  форма   может  использоваться   только   в   функциях,   не
возвращающих значение;  вызывающей функцию  программе  возвращается
значение выражения.  Если необходимо,  то выражение  преобразуется,
как это  делается при  присваивании, к  типу функции, в которой оно
возникло. Обход  конца функции  эквивалентен  возврату  return  без
возвращаемого значения.
<a name=9_11></a>
<h4>9.11 Оператор gotо</h4>
<p align=justify>Можно  осуществлять  безусловную  передачу  управления  с  помощью
оператора
<pre>
	 goto идентификатор ;
</pre>
<p align=justify>Идентификатор  должен  быть  меткой    (<a href=ref_6.htm#9_12>#9.12</a>),  расположенной  в
текущей функции.
<a name=9_12></a>
<h4>9.12 Помеченные операторы</h4>
<p align=justify>Перед любым оператором может стоять префикс метка, имеющий вид
<pre>
	идентификатор :
</pre>
который  служит   для  описания  идентификатора  как  метки.  Метка
используется только  как объект  для goto. Областью видимости метки
является текущая  функция, исключая  любой подблок,  в котором  был
переописан такой же идентификатор. См. <a href=ref_2.htm#4_1>#4.1</a>.
<a name=9_13></a>
<h4>9.13 Пустой оператор</h4>
<p align=justify>Пустой оператор имеет вид
<pre>
	;
</pre>
<p align=justify>Пустой оператор  используется для помещения метки непосредственно
перед  }  составного  оператора  или  того,  чтобы  снабдить  такие
операторы, как while, пустым телом.
<a name=9_14></a>
<h4>9.14 Оператор deletе</h4>
<p align=justify>Оператор delete имеет вид
<pre>
	delete выражение ;
</pre>
<p align=justify>Результатом выражения  должен быть  указатель. Объект, на который
он  указывает,   уничтожается.  Это  значит,  что  после  оператора
уничтожения  delete   нельзя  гарантировать,   что   объект   имеет
определенное значение;  см. <a href=ref_9.htm#17>#17</a>.  Эффект от  применения  delete    к
указателю, не  полученному из  операции new   (<a href=ref_4.htm#7_1>#7.1</a>),  не определен.
Однако, уничтожение указателя с нулевым значением безопасно.
<a name=9_15></a>
<h4>9.15 Оператор asм</h4>
<p align=justify>Оператор asm имеет вид
<pre>
	asm ( строка) ;
</pre>
<p align=justify>Смысл оператора  asm  не определен.  Обычно  он  используется  для передачи информации через компилятор ассемблеру.
<p><center><p>
<font size=-1>
<a href="ref_5.htm">Назад</a> | <a href="index.htm">Содержание</a> | <a href="ref_7.htm">Вперед</a></font></center></p>
<br>
<div align="center"><a href="http://www.linkexchange.ru/users/000729/goto.map" target="_blank"><img ismap src="http://www.linkexchange.ru/cgi-bin/rle.cgi?729?11209435" alt="Russian LinkExchange Advertising Network" border=0 height=60 width=468 vspace=0></a></div>
</body></html>
