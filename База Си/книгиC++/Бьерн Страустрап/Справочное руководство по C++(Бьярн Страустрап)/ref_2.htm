<html><head>
<title>Запись синтаксиса. Справочное руководство по C++</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<a name=3></a>
<h3> 3. Запись синтаксиса</h3> 
<p align=justify>По используемым  в  данном  руководстве  синтаксическим  правилам
записи синтаксические  категории выделяются  курсивом а литеральные
слова  и   символы  шрифтом   постоянной  ширины<a href=#prim><sup>*</sup></a>.   Альтернативные
категории   записываются    на   разных   строках.   Необязательный
терминальный  или   нетерминальный     символ  обозначается  нижним
индексом  "opt", так что
<pre>
	{ выражение opt }
</pre>
указывает  на   необязательность  выражения   в  фигурных  скобках.
Синтаксис кратко изложен в <a href=ref_8.htm#14>#14</a>.
<a name=4></a>
<h3>4. Имена и типы</h3>
<p align=justify>Имя обозначает (денотирует)  объект, функцию,  тип,  значение  или
метку.  Имя   вводится  в   программе  описанием  (<a href=ref_5.htm#8>#8</a>).  Имя  может
использоваться только  внутри области  текста программы, называемой
его  областью   видимости.  Имя   имеет   тип,   определяющий   его
использование. Объект  - это  область памяти.  Объект  имеет  класс
памяти, определяющий его время жизни. Смысл значения, обнаруженного
в объекте,  определяется типом имени, использованного для доступа к
нему.
<a name=4_1></a>
<h4>4.1 Область видимости</h4>
<p align=justify>Есть четыре вида областей видимости: локальная, файл, программа и класс.
<dl>
<dt>Локальная:<dd> Имя, описанное в блоке (<a href=ref_6.htm#9_2>#9.2</a>), локально в этом блоке и
может использоваться  только в  нем после  места описания  и в
охватываемых  блоках.  Исключение  составляют  метки  (<a href=ref_6.htm#9_12>#9.12</a>),
которые могут  использоваться в любом месте функции, в которой
они   описаны.    Имена    формальных    параметров    функции
рассматриваются так,  как если  бы они  были описаны  в  самом
внешнем блоке этой функции.
<dt>  Файл: <dd> Имя,  описанное вне  любого блока (<a href=ref_6.htm#9_2>#9.2</a>) или класса (<a href=ref_5.htm#8_5>#8.5</a>),
может использоваться  в файле,  где оно  описано, после  места
описания.
<dt>  Класс: <dd> Имя   члена  класса  локально  для  его  класса  и  может
использоваться только  в функции  члене этого класса (<a href=ref_5.htm#8_5_2>#8.5.2</a>),
после примененной  к объекту  его класса (<a href=ref_4.htm#7_1>#7.1</a>) операции . или
после примененной  к указателю  на объект  его  класса  (<a href=ref_4.htm#7_1>#7.1</a>)
операции ->.  На статические  члены класса  (<a href=ref_5.htm#8_5>#8.5</a>.1) и функции
члены можно также ссылаться с помощью операции :: там, где имя
их класса  находится в  области  видимости.  Класс,  описанный
внутри класса  (<a href=ref_5.htm#8_5_15>#8.5.15</a>),  не  считается  членом,  и  его  имя
принадлежит охватывающей области видимости.
</dl>
Имя может  быть скрыто  посредством явного описания того же имени в
блоке или  классе. Имя  в блоке или классе может быть скрыто только
именем,  описанным   в  охватываемом   блоке  или  классе.  Скрытое
нелокальное имя  также  может  использоваться,  когда  его  область
видимости указана  операцией :: (<a href=ref_4.htm#7_1>#7.1</a>). Имя класса, скрытое именем,
которое не  является именем  типа, все  равно может использоваться,
если  перед   ним  стоит   class,  struct  или  union  (<a href=ref_5.htm#8_2>#8.2</a>).  Имя
перечисления enum, скрытое именем, которое не является именем типа,
все равно может использоваться, если перед ним стоит enum (<a href=ref_5.htm#8_2>#8.2</a>).
<a name=4_2></a>
<h4>4.2 Определения</h4>
<p align=justify>Описание (<a href=ref_5.htm#8>#8</a>)  является определением, за исключением тех случаев,
когда оно  описывает функции,  не задавая  тела функции (#10), когда
оно содержит спецификатор extern (1) и в нем нет инициализатора или
тела функции, или когда оно является описанием класса (<a href=ref_5.htm#8_8>#8.8</a>).
<a name=4_3></a>
<h4>4.3 Компоновка</h4>
<p align=justify>Имя в  файловой области  видимости, не описанное явно как static,
является общим  для каждого  файла многофайловой программы. Таковым
же является имя функции. О таких именах говорится, что они внешние.
Каждое описание  внешнего имени  в программе  относится к  тому  же
объекту (<a href=ref_3.htm#5>#5</a>),  функции (<a href=ref_5.htm#8_7>#8.7</a>),  классу (<a href=ref_5.htm#8_5>#8.5</a>), перечислению (<a href=ref_5.htm#8_10>#8.10</a>)
или значению перечислителя (<a href=ref_5.htm#8_10>#8.10</a>).
  Типы, специфицированные  во всех  описаниях внешнего имени должны
быть  идентичны.   Может  быть   больше  одного  определения  типа,
перечисления, inline-функции  (<a href=ref_5.htm#8_1>#8.1</a>) или несоставного const (<a href=ref_5.htm#8_2>#8.2</a>),
при условии, что определения идентичны, пояляются в разных файлах и
все инициализаторы являются константными выражениями (<a href=ref_7.htm#12>#12</a>). Во всех
остальных случаях  должно быть  ровно одно определение для внешнего
имени в программе.
  Реализация   может    потребовать,   чтобы    составное    const,
использованное там,  где не  встречено никакого  определения  const,
должно быть  явно описано  extern и  иметь в  программе ровно  одно
определение. Это же ограничение может налагаться на inline-функции.
<a name=4_4></a>
<h4>4.4  Классы памяти</h4>
<p align=justify>Есть два описываемых класса памяти: автоматический и статический.
<p align=justify>Автоматические объекты локальны для каждого вызова блока и
  сбрасываются по выходе из него.
<p align=justify>Статические объекты существуют и сохраняют свое значение в
  течение выполнения всей программы.
<p align=justify>Некоторые объекты  не связаны  с именами  и их времена жизни явно
управляются операторами  new и delete ; см. <a href=ref_4.htm#7_2>#7.2</a> и <a href=ref_6.htm#9_14>#9.14</a>
<a name=4_5></a>
<h4>4.5 Основные типы</h4>
<p align=justify>Объекты, описанные  как символы  (char), достаточны  для хранения
любого элемента  машинного набора  символов, и  если  принадлежащий
этому  набору  символ  хранится  в  символьной  переменной,  то  ее
значение равно целому коду этого символа.
<p align=justify>В настоящий  момент имеются  целые трех размеров, описываемые как
short int,   int  и  long  int.  Более  длинные  целые  (long  int)
предоставляют не  меньше памяти,  чем более  короткие целые  (short
int), но  при реализации  или длинные,  или короткие,  или и  те  и
другие могут  стать эквивалентными  обычным целым.  "Обычные" целые
имеют  естественный  размер,  задаваемый  архитектурой  центральной
машины; остальные  размеры  делаются  такими,  чтобы  они  отвечали
специальным потребностям.
<p align=justify>Каждое перечисление (<a href=ref_5.htm#8_9>#8.9</a>) является набором именованных констант.
Свойства enum идентичны свойствам int.
<p align=justify>Целые без  знака, описываемые  как unsigned, подчиняются правилам
арифметики по модулю 2n, где n - число бит в их представлении.
<p align=justify>Числа с  плавающей точкой  одинарной (float)  и двойной  (double)
точности в некоторых машинных реализациях могут быть синонимами.
<p align=justify>Поскольку  объекты   перечисленных  выше   типов   вполне   можно
интерпретировать  как  числа,  мы  будем  говорить  о  них  как  об
арифметических типах.  Типы   char, int  всех размеров и enum будут
собирательно называться  целыми типами.  Типы  float и double будут
собирательно называться плавающими типами.
<p align=justify>Тип данных  void (пустой)  определяет пустое  множество значений.
Значение (несуществующее)  объекта void нельзя использовать никаким
образом, не  могут применяться ни явное, ни неявное преобразования.
Поскольку  пустое  выражение  обозначает  несуществующее  значение,
такое выражение  такое выражение  может использоваться  только  как
оператор выражение  (<a href=ref_6.htm#9_1>#9.1</a>) или  как левый  операнд  в  выражении  с
запятой (<a href=ref_4.htm#7_15>#7.15</a>). Выражение может явно преобразовываться к типу void
(<a href=ref_4.htm#7_2>#7.2</a>).
<a name=4_6></a>
<h4>4.6 Производные типы</h4>
<p align=justify>Кроме  основных  арифметических  типов  концептуально  существует
бесконечно много  производных типов,  сконструированных из основных
типов следующим образом:
<ul>
<li>массивы объектов данного типа;
<li>функции, получающие аргументы данного типа и возвращающие объекты
  данного типа;
<li>указатели на объекты  данного типа;
<li>ссылки на объекты  данного типа;
<li>константы, являющиеся значениями данного типа;
<li>классы, содержащие последовательность объектов  различных типов,
  множество функций для работы с этими объектами и набор
  ограничений на доступ к этим объектам и функциям;
  структуры, являющиеся классами без ограничений доступа;
<li>объединения, являющиеся структурами, которые могут в разное время
  содержать объекты разных типов.
</ul>
<p align=justify>В целом  эти способы  конструирования  объектов  могут  применяться рекурсивно.
<p align=justify>Объект типа  void*  (указатель  на  void)  можно  использовать  для указания на объекты неизвестного типа.
<a name=prim></a><small>
<p align=justify>* !!!  выделить "постоянной  ширины" шрифтом,  которым печатаются программы и английские слова!!!</small>
<p><center><p>
<font size=-1>
<a href="ref_1.htm">Назад</a> | <a href="index.htm">Содержание</a> | <a href="ref_3.htm">Вперед</a></font></center></p>
<br>
<div align="center"><a href="http://www.linkexchange.ru/users/000729/goto.map" target="_blank"><img ismap src="http://www.linkexchange.ru/cgi-bin/rle.cgi?729?28340234" alt="Russian LinkExchange Advertising Network" border=0 height=60 width=468 vspace=0></a></div>
</body></html>
