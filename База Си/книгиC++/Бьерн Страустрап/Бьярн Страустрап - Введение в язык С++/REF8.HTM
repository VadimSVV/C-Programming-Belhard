<htm>
<head>





<title>Бьярн Страустрап. Введение в язык Си++, Описания</title>
</head>
<body bgcolor=fff5ee link=ff0000 alink=ff0000 vlink=a52a2a >
<basefont size="3"><center>
<table width=100%>
<tr><td><a href="cit.htm#2" onMouseOver="status='Server for Information Technologies (Main)' ;return true" onMouseOut="status='' ;return true"><img height=50 src="pictures/logo.gif" alt="Server for Information Technologies" border=0></a></td>
<th><font color=navy><a href="cit.htm#2">Сервер Информационных Технологий</a><br>
содержит море(!) аналитической информации</font>
</th><td><p align=right><font size="-2">
Сервер поддерживается<br>
<a href="cit.htm#1">Центром Информационных Технологий</a><br>
(095) 932-9212, 932-9213, 939-0783<br>
E-mail: <a href="mailto:info@citforum.ru?Subject='From page topic CIT-FORUM Local Copy'">info@citforum.ru</a></font></p></td>
</tr>
</table>
</center>
<hr noshade width=90%>

<a name=ref8>
<h2 align=center>               8. Описания </h2>
<p>  Описания используются  для  определения  интерпретации,  даваемой
каждому идентификатору;  они  не  обязательно  резервируют  память,
связанную с идентификатором. Описания имеют вид:
<p>  описание:
<pre>
      спецификаторы_описания opt список_описателей opt ;
      описание_имени
      asm_описание
</PRE>
<BR>  Описатели в списке_описателей содержат идентификаторы, подлежащие
описанию. Спецификаторы_описания    могут  быть  опущены  только  в
определениях  внешних  функций  (<a HREF=ref9_18.htm#ref9_18.10>#10</a>)    или  в  описаниях  внешних функций. Список  описателей может  быть пустым  только при описании
класса  (<a HREF=#ref8.5>#8.5</a>)   или   перечисления   (<a HREF=#ref8.10>#8.10</a>),   то   есть,   когда спецификаторы_описания     -     это     class_спецификатор     или enum_спецификатор. Описания   имен описываются в #8.8; описания asm описаны в <a HREF=#ref8.11>#8.11.</a>
<pre>
  спецификатор_описания:
      sc_спецификатор
      спецификатор_типа
      фнк_спецификатор
      friend
      typedef

  спецификаторы_описания:
      спецификатор_описания спецификатор_описания opt
</PRE>
<BR>  Список должен  быть внутренне  непротиворечив в  описываемом ниже
смысле.
<a name=ref8.1>
<h3 align=center>     8.1 Спецификаторы класса памяти </h3>
<p>  Спецификаторы "класса памяти" (sc-спецификатор) это:
<pre>
  sc-спецификатор:
      auto
      static
      extern
      register
</PRE>
<BR>  Описания, использующие  спецификаторы  auto,  static  и  register
также служат  определениями тем,  что они  вызывают  резервирование
соответствующего объема  памяти. Если  описание extern  не является
определением (<a HREF=ref1_7.htm#ref1_7.4.2>#4.2</a>),  то где-то  еще должно  быть  определение  для данных идентификаторов.
<br>  Описание register  лучше  всего  представить  как  описание  auto
(автоматический) с подсказкой компилятору, что описанные переменные
усиленно используются.  Подсказка может быть проигнорирована. К ним
не может применяться операция получения адреса &.
<br>  Спецификаторы  auto  или  register  могут  применяться  только  к
именам, описанным  в блоке,  или к  формальным  параметрам.  Внутри
блока не может быть описаний ни статических функций, ни статических
формальных параметров.
<br>  В описании может быть задан максимум один sc_спецификатор. Если в
описании отсутствует  sc_спецификатор, то  класс памяти  принимается
автоматическим  внутри   функции  и  статическим  вне.  Исключение:
функции не могут быть автоматическими.
<br>  Спецификаторы static  и extern  могут использоваться  только  для
имен объектов и функций.
<br>  Некоторые спецификаторы  могут использоваться  только в описаниях
функций:
<pre>
  фнк-спецификатор:
      overload
      inline
      virtual
</PRE>
<BR>  Спецификатор перегрузки  overload делает  возможным использование
одного имени для обозначения нескольких функций; см. <a HREF=#ref8.9>#8.9.</a>
<br>  Спецификатор inline  является только  подсказкой компилятору,  не
влияет  на   смысл  программы   и  может  быть  проигнорирован.  Он
используется, чтобы  указать на  то, что при вызове функции inline-
подстановка тела функции предпочтительнее обычной реализации вызова
функции. Функция  (<a HREF=#ref8.5.2>#8.5.2</a> и  <a HREF=#ref8.5.10>#8.5.10</a>), определенная внутри описания
класса, является inline по умолчанию.
<br>  Спецификатор virtual  может  использоваться  только  в  описаниях
членов класса; см. <a HREF=#ref8.5.4>#8.5.4.</a>
<br>  Спецификатор friend  используется для отмены правил скрытия имени
для членов  класса и  может использоваться  только внутри  описаний
классов; см. <a HREF=#ref8.5.9>#8.5.9.</a>
<br>  С помощью спецификатора typedef вводится имя для типа; см. <a HREF=#ref8.8>#8.8.</a>
<a name=ref8.2>
<h3 align=center>   8.2 Спецификаторы Типа </h3>
<p>  Спецификаторами типов (спецификатор_типа) являются:
<pre>
  спецификатор_типа:
      простое_имя_типа
      class_спецификатор
      enum-спецификатор
      сложный_спецификатор_типа
      const
</PRE>
<BR>  Слово   const    можно    добавлять    к    любому    допустимому
спецификатору_типа. В  остальных случаях в описании может быть дано
не более  одного спецификатора_типа.  Объект типа const не является
lvalue. Если  в описании  опущен спецификатор  типа, он принимается
int.
<pre>
  простое_имя_типа:
      char
      short
      int
      long
      unsigned
      float
      double
      const
      void
</PRE>
<BR>  Слова  long,   short   и   unsigned   можно   рассматривать   как
прилагательные. Они  могут применяться  к типу  int; unsigned может
также применяться к типам char, short и long.
<br>  Спецификаторы класса  и перечисления  обсуждаются в  <a HREF=#ref8.5>#8.5</a> и <a HREF=#ref8.10>#8.10</a>
соответственно.
<pre>
  сложный_спецификатор_типа:
      ключ typedef-имя
      ключ идентификатор

  ключ:
      class
      struct
      union
      enum
</PRE>
<BR>  Сложный спецификатор  типа можно  использовать для  ссылки на имя
класса или  перечисления там,  где имя  может быть скрыто локальным
именем. Например:
<pre>
  class x { ... };

  void f(int x)
  {
      class x a;
      // ...
  }
</PRE>
<BR>  Если  имя   класса  или   перечисления  ранее  описано  не  было,
сложный_спецификатор_типа работает как описание_имени; см. <a HREF=#ref8.8>#8.8.</a>
<a name=ref8.3>
<h3 align=center>    8.3 Описатели</h3>
<p>  Список_описателей,  появляющийся  в  описании,  есть  разделенная
запятыми последовательность  описателей, каждый  из  которых  может
иметь инициализатор.
<pre>
  список_описателей:
      иниц_описатель
      иниц_описатель  ,  список_описателей
      иниц_описатель:
      описатель  инициализатор opt
</PRE>
<BR>  Инициализаторы  обсуждаются   в  <a HREF=#ref8.6>#8.6.</a>  Спецификатор  в  описании указывает  тип   и  класс  памяти  объектов,  к  которым  относятся
описатели. Описатели имеют синтаксис:
<pre>
  описатель:
      оп_имя
      ( описатель )
      * const opt  описатель
      & const opt  описатель
      описатель   ( список_описаний_параметров )
      описатель     [ константное_выражение opt ]

  оп-имя:
      простое_оп_имя
      typedef-имя  ::  простое_оп_имя

  простое_оп_имя:
      идентификатор
      typedef-имя
      ~  typedef-имя
      имя_функции_операции
      имя_функции_преобразования
</PRE>
<BR>Группировка та же, что и в выражениях.
<a name=ref8.4>
<h3 align=center>   8.4 Смысл описателей</h3>
<table border=0>
<tr><td width=10></td><TD>  <a HREF=#ref8.4.1>           8.4.1 Примеры           </a>
</table>
<p>  Каждый  описатель   считается  утверждением   того,  что  если  в
выражении возникает  конструкция,  имеющая  ту  же  форму,  что  и
описатель, то  она дает  объект указанного  типа и  класса  памяти.
Каждый  описатель   содержит  ровно  одно  оп_имя;  оно  определяет
описываемый  идентификатор.   За  исключением   описаний   некоторых
специальных  функций   (см. <a HREF=#ref8.5.2>#8.5.2</a>)   ,   оп_имя   будет   простым идентификатором.
<br>  Если  в   качестве  описателя  возникает  ничем  не    снабженный
идентификатор,  то   он  имеет   тип,   указанный   спецификатором,
возглавляющим описание.
<br>  Описатель в  скобках эквивалентен описателю без скобок, но связку
сложных описателей скобки могут изменять.
<br>  Теперь представим себе описание
<pre>
  T D1
</PRE>
<BR>где T  - спецификатор  типа (как  int и  т.д.), а  D1 -  описатель.
Допустим, что  это описание заставляет идентификатор иметь тип "...
T", где  "..." пусто,  если идентификатор  D1  есть  просто  обычный
идентификатор (так  что тип  x в  "int x"  есть просто int). Тогда,
если  D1  имеет вид
<pre>
  *D
</PRE>
<BR>  то тип содержащегося идентификатора есть "... указатель на T."
<br>  Если D1 имеет вид
<pre>
  * const D
</PRE>
<BR>то тип содержащегося идентификатора есть "... константный указатель
на T", то есть, того же типа, что и *D, но не lvalue.
<br>  Если D1 имеет вид
<pre>
  &D
</PRE>
<BR>или
<pre>
  & const D
</PRE>
<BR>то  тип  содержащегося  идентификатора  есть  "...  ссылка  на  T."
Поскольку ссылка по определению не может быть lvalue, использование
const излишне. Невозможно иметь ссылку на void (void&).
<br>  Если D1 имеет вид
<pre>
  D (список_описаний_параметров)
</PRE>
<BR>то содержащийся  идентификатор имеет тип  "... функция, принимающая
параметр типа список_описаний_параметров и возвращающая T."
<pre>
  список_описаний_параметров:
      список_описаний_парам opt ... opt

  список_описаний_парам:
      список_описаний_парам  ,  описание_параметра
      описание_параметра

  описание_параметра:
      спецификаторы_описания  описатель
      спецификаторы_описания  описатель  = выражение
      спецификаторы_описания  абстракт_описатель
      спецификаторы_описания  абстракт_описатель  =  выражение
</PRE>
<BR>  Если список_описаний_параметров   заканчивается многоточием, то о
числе параметров  известно лишь,  что оно  равно или  больше  числа
специфицированных типов  параметров; если  он пуст,  то функция  не
получает  ни одного  параметра.  Все  описания  для  функции  должны
согласовываться и  в типе возвращаемого значения, а также в числе и
типе параметров.
<br>  Список_описаний_параметров   используется    для    проверки    и
преобразования фактических  параметров и  для контроля присваивания
указателю на  функцию. Если  в описании  параметра  специфицировано
выражение, то это выражение используется как параметр по умолчанию.
Параметры по  умолчанию будут использоваться в вызовах, где опущены
стоящие  в   хвосте  параметры.  Параметр  по  умолчанию  не  может
переопределяться более  поздними описаниями. Однако, описание может
добавлять    параметры  по  умолчанию,  не  заданные  в  предыдущих
описаниях.
<br>Идентификатор может по желанию быть задан как имя параметра. Если
он  присутствует  в  описании  функции,  его  использовать  нельзя,
поскольку  он   сразу  выходит   из  области   видимости.  Если  он
присутствует в  определении функции (<a HREF=ref9_18.htm#ref9_18.10>#10</a>), то он именует формальный параметр.
<br>  Если D1 имеет вид
<pre>
  D[ константное_выражение]
</PRE>
<BR>или
<pre>
  D[]
</PRE>
<BR>то тип  содержащегося идентификатора есть "... массив объектов типа
T". В  первом случае константное_выражение есть выражение, значение
которого может  быть определено во время компиляции, и тип которого
int.   (Константные выражения  определены в  <a HREF=ref9_18.htm#ref9_18.12>#12.</a>) Если подряд идут несколько  спецификаций   "массив  из",  то  создается  многомерный
массив; константное  выражение, определяющее границы массива, может
быть опущено  только для  первого  члена  последовательности.  Этот
пропуск  полезен,   когда  массив  является  внешним,  и  настоящее
определение, которое  резервирует память, находится в другом месте.
Первое константное  выражение может  также быть  опущено, когда  за
описателем  следует   инициализация.  В  этом  случае  используется
размер, вычисленный исходя из числа начальных элементов.
<br>  Массив может  быть построен  из  одного  из  основных  типов,  из
указателей, из  структуры или  объединения или  из другого  массива
(для получения многомерного массива).
<br>  Не все возможности, которые позволяет приведенный выше синтаксис,
допустимы.  Ограничения  следующие:  функция  не  может  возвращать
массив или  функцию, хотя  она может  возвращать указатели  на  эти
объекты; не  существует массивов  функций, хотя  могут быть массивы
указателей на функции.
<a name=ref8.4.1>
<h4 align=center>   8.4.1 Примеры </h4>
<p>  В качестве примера, описание
<pre>
  int i;
  int *ip;
  int f ();
  int *fip ();
  int (*pfi) ();
</PRE>
<BR>описывает целое  i, указатель  ip на целое, функцию f, возвращающую
целое, функцию  fip ,  возвращающую указатель на целое, и указатель
pfi на  функцию,  возвращающую  целое.  Особенно  полезно  сравнить
последние две. Цепочка *fip()  есть *(fip()),  как предполагается в
описании, и  та же конструкция требуется в выражении, вызов функции
fip, и  затем косвенное  использование результата через (указатель)
для  получения   целого.  В   описателе  (*pfi)()   внешние  скобки
необходимы, поскольку  они также  входят в  выражение, для указания
того, что  функция получается  косвенно через  указатель на функцию,
которая затем  вызывается; это  возвращает целое.  Функции f  и fip
описаны как  не получающие  параметров, и  fip   как указывающая на
функцию, не получающую параметров.
<br>  Описание
<pre>
  const a = 10, *pc = &a, *const cpc = pc;
  int b, *const cp = &b;
</PRE>
<BR>описывает a:  целую константу,  pc: указатель  на целую  константу,
cpc: константный  указатель на  целую константу,  b:  целое  и  cp:
константный указатель  на целое. Значения a, cpc и cp не могут быть
изменены после  инициализации. Значение pc может быть изменено, как
и объект, указываемый cp. Примеры недопустимых выражений :
<pre>
  a = 1;
  a++;
  *pc = 2;
  cp = &a;
  cpc++;
</pre>
<br>  Примеры допустимых выражений :
<pre>
  b = a;
  *cp = a;
  pc++;
  pc = cpc;
</PRE>
<BR>  Описание
<pre>
  fseek (FILE*,long,int);
</PRE>
<BR>описывает функцию,  получающую  три  параметра  специальных  типов.
Поскольку тип возвращаемого значения не определен, принимается, что
он int (<a HREF=#ref8.2>#8.2</a>). Описание
<pre>
  point (int = 0,int = 0);
</PRE>
<BR>описывает функцию,  которая может  быть вызвана  без параметров,  с
одним или двумя параметрами типа int. Например
<pre>
  point (1,2);
  point (1)             /* имеет смысл point (1,0); */
  point ()              /* имеет смысл point (0,0); */
</PRE>
<BR>  Описание
<pre>
  printf (char* ... );
</PRE>
<BR>описывает функцию,  которая  может  быть  вызываться  с  различными
числом и типами параметров. Например
<pre>
  printf ("hello, world");
  printf ("a=%d b=%d",a,b);
  printf ("string=%s",st);
</PRE>
<BR>Однако, она всегда должна иметь своим первым параметром char*.
<br>  В качестве другого примера,
<pre>
  float fa[17], *afp[17];
</PRE>
<BR>описывает массив  чисел с  плавающей точкой  и массив указателей на
числа с плавающей точкой. И, наконец,
<pre>
  static int x3d[3][5][7];
</PRE>
<BR>  описывает  массив  целых,  размером  3x6x7.  Совсем  подробно:  x3d
является массивом  из трех  элементов; каждый из элементов является
массивом из  пяти элементов; каждый из последних элементов является
массивом из  семи целых. Появление каждое из выражений x3d, x3d[i],
x3d[i][j], x3d[i][j][k]  может быть приемлемо. Первые три имеют тип
"массив", последний имеет тип int.
<a name=ref8.5>
<h3 align=center>     8.5 Описания классов </h3>
<table border=0>
<tr><td width=10></td><TD>  <a HREF=#ref8.5.1> 8.5.1 Статические члены     </a>                     
<tr><td width=10></td><TD>  <a HREF=#ref8.5.2> 8.5.2 Функции члены            </a>                 
<tr><td width=10></td><TD>  <a HREF=#ref8.5.3> 8.5.3 Производные классы     </a>                    
<tr><td width=10></td><TD>  <a HREF=#ref8.5.4> 8.5.4 Виртуальные функции  </a>                      
<tr><td width=10></td><TD>  <a HREF=#ref8.5.5> 8.5.5 Конструкторы                </a>              
<tr><td width=10></td><TD>  <a HREF=#ref8.5.6> 8.5.6 Преобразования            </a>                 
 <tr><td width=10></td><TD> <a HREF=#ref8.5.7> 8.5.7 Деструкторы                   </a>             
<tr><td width=10></td><TD>  <a HREF=#ref8.5.8> 8.5.8 Видимость имен членов  </a>                    
<tr><td width=10></td><TD>  <a HREF=#ref8.5.9>   8.5.9 Друзья (friends) </a>            
<tr><td width=10></td><TD>  <a HREF=#ref8.5.10>  8.5.10 Функция операция </a>                          
<tr><td width=10></td><TD> <a HREF=#ref8.5.11>   8.5.11 Структуры                  </a>               
<tr><td width=10></td><TD> <a HREF=#ref8.5.12>   8.5.12 Объединения             </a>                  
<tr><td width=10></td><TD> <a HREF=#ref8.5.13>   8.5.13 Поля бит                    </a>              
<tr><td width=10></td><TD> <a HREF=#ref8.5.14>   8.5.14 Вложенные классы    </a>                     
</table>
<p>  Класс специфицирует  тип. Его  имя  становится  typedef-имя  (см.
<a HREF=#ref8.8>#8.8</a>),  которое   может  быть   использовано  даже   внутри  самого спецификатора класса.  Объекты класса состоят из последовательности
членов.
<pre>
     спецификатор_класса:
          заголовок_класса     {      список_членов      opt      }
          заголовок_класса         {  список_членов  opt  public  :
     список_членов                      opt                       }

     заголовок_класса:
          агрег                  идентификатор                  opt
          агрег идентификатор opt : public opt typedef-имя
     агрег:
          class
          struct
          union
</PRE>
<BR>    Структура является  классом,  все    члены  которого  общие;  см.
<a HREF=#ref8.5.8>#8.5.8.</a> Объединение  является классом,  содержащим в  каждый момент только один член; см. <a HREF=#ref8.5.12>#8.5.12.</a>  Список членов может описывать члены вида: данные,  функция, класс,  определение  типа,  перечисление  и
поле.  Поля  обсуждаются  в  <a HREF=#ref8.5.13>#8.5.13.</a>  Список  членов  может  также содержать описания, регулирующие видимость имен членов; см. <a HREF=#ref8.5.8>#8.5.8.</a>
<pre>
     список_членов:
          описание_члена  список_членов opt
     описание_члена:
          спецификаторы_описания        opt        описатель_члена;
     описатель_члена:
          описатель                         идентификатор   opt   :
     константное_выражение
</PRE>
<BR>    Члены, являющиеся  классовыми объектами,  должны  быть  объектами
предварительно полностью  описанных классов.  В частности, класс cl
не  может  содержать  объект  класса  cl,  но  он  может  содержать
указатель на объект класса cl.
<br>  Имена объектов  в различных классах не конфликтуют между собой и с
обычными переменными.
<br>  Вот простой пример описания структуры:
<pre>
  struct tnode
      {
        char tword[20];
        int count;
        tnode *left;
        tnode *right;
      };
</PRE>
<BR>содержащей массив из 20 символов, целое и два указателя на такие же
структуры. Если было дано такое описание, то описание
<pre>
  tnode s, *sp
</PRE>
<BR>  описывает s  как структуру  данного сорта  и sp  как  указатель  на
структуру данного сорта. При наличии этих описаний выражение
<pre>
  sp->count
</PRE>
<BR>ссылается на поле count структуры, на которую указывает sp;
<pre>
  s.left
</PRE>
<BR>ссылается на указатель левого поддерева структуры s; а
<pre>
   s.right->tword[0]
</PRE>
<BR>ссылается на  первый символ члена tword  правого поддерева структуры
s.
<a name=ref8.5.1>
<h4 align=center>    8.5.1 Статические члены </h4>
 <P>  Член-данные класса  может быть  static; члены-функции  не  могут.
Члены не  могут быть  auto, register  или extern. Есть единственная
копия статического  члена,  совместно  используемая  всеми  членами
класса в  программе. На  статический член  mem   класса cl    можно
ссылаться cl:mem, то есть без ссылки на объект. Он существует, даже
если не было создано ни одного объекта класса cl.
<a name=ref8.5.2>
<h4 align=center>  8.5.2 Функции члены </H4>
<p>  Функция, описанная  как член, (без спецификатора friend (<a HREF=#ref8.5.9>#8.5.9</a>)) называется функцией  членом и вызывается с помощью синтаксиса члена класса (<a HREF=ref1_7.htm#ref1_7.7.1>#7.1</a>). Например:
<pre>
  struct tnode
    {
      char tword[20];
      int count;
      tnode *left;
      tnode *right;
      void set (char* w,tnode* l,tnode* r);
    };

  tnode n1, n2;

  n1.set ("asdf",&n2,0);
  n2.set ("ghjk",0,0);
</PRE>
<BR>  Определение  функции  члена  рассматривается  как  находящееся  в
области  видимости   ее  класса.   Это  значит,   что   она   может
непосредственно использовать  имена  ее  класса.  Если  определение
функции члена  находится вне  описания класса, то имя функции члена
должно быть уточнено именем класса с помощью записи
<pre>
     typedef-имя . простое_оп_имя
</PRE>
<BR>  см. 3.3. Определения функций обсуждаются в 
<a HREF=ref9_18.htm#ref9_18.10.1>#10.1. Например:
<pre>
  void tnode.set (char* w,tnode* l,tnode* r)
    {
      count = strlen (w);
      if (sizeof (tword) <= count) error ("tnode string too long");
      strcpy (tword,w);
      left = l;
      right = r;
    }
</PRE>
<BR>  Имя  функции  tnode.set  определяет  то,  что  множество  функций
является членом  класса tnode.  Это  позволяет  использовать  имена
членов word,  count, left  и  right.  В  функции  члене  имя  члена
ссылается на  объект, для  которого была  вызвана функция.  Так,  в
вызове  n1.set(...)   tword  ссылается  на  n1.tword,  а  в  вызове
n2.set(...)     он  ссылается   на   n2.tword.   В   этом   примере
предполагается, что функции strlen, error и strcpy описаны где-то в
другом месте как внешние функции (см. <a HREF=ref9_18.htm#ref9_18.10.1>#10.1</a>).
<br>  В члене  функции ключевое  слово this  указывает на  объект,  для
которого вызвана  функция. Типом  this в  функции, которая является
членом класса  cl, является cl*. Если mem - член класса cl,то mem и
this->mem -  синонимы в  функции члене  класса cl  (если mem не был
использован в  качестве имени  локальной переменной в промежуточной
области видимости).
<br>  Функция член  может быть  определена (<a HREF=ref9_18.htm#ref9_18.10.1>#10.1</a>)  в описании  класса. Помещение определения  функции члена  в  описание  класса  является
кратким видом  записи  описания  ее  в  описании  класса  и  затем
определения ее  как inline  (<a HREF=#ref8.1>#8.1</a>)  сразу  после  описания  класса.
Например:
<pre>
  int b;
  struct x
    {
      int f () { return b; }
      int f () { return b; }
      int b;
    };
</PRE>
<BR> означает
<pre>
  int b;
  struct x
    {
      int f ();
      int b;
    };
  inline x.f () { return b; }
</PRE>
<BR>  Для функций  членов не нужно  использование спецификатора
overload (<a HREF=#ref8.2>#8.2</a>): если имя описывается как означающее несколько имен в классе, то оно перегружено (см. <a HREF=#ref8.9>#8.9</a>).
<br>  Применение операции получения адреса к функциям членам допустимо.
Тип параметра  результирующей функции  указатель на  есть (...), то
есть,  неизвестен   (<a HREF=#ref8.4>#8.4</a>).     Любое  использование  его  является
зависимым от  реализации, поскольку  способ инициализации указателя
для вызова функции члена не определен.
<a name=ref8.5.3>
<h4 align=center>   8.5.3 Производные классы</h4>
<p>  В конструкции
<pre>
     агрег идентификатор:public opt typedef-имя
</PRE>
<BR>  typedef-имя  должно  означать  ранее  описанный  класс,  называемый
базовым классом  для класса,  подлежащего описанию.  Говорится, что
последний выводится  из предшествующего.  На члены  базового класса
можно ссылаться,  как если бы они были членами производного класса,
за  исключением   тех  случаев,   когда  имя  базового  члена  было
переопределено в  производном классе;  в этом  случае для ссылки на
скрытое имя  может использоваться такая запись (<a HREF=ref1_7.htm#ref1_7.7.1>#7.1</a>): 
<pre>
     typedef-имя :: идентификатор
</PRE>
<BR>    Например:
<pre>
  struct base
    {
      int a;
      int b;
    };

  struct derived : public base
    {
      int b;
      int c;
    };

  derived d;

  d.a = 1;
  d.base::b = 2;
  d.b = 3;
  d.c = 4;
</PRE>
<BR>осуществляет присваивание четырем членам d.
<br>  Производный тип сам может использоваться как базовый.
<a name=ref8.5.4>
<h4 align=center>   8.5.4 Виртуальные функции </h4>
<p>  Если базовый  класс base  содержит (виртуальную)  virtual  (<a HREF=#ref8.1>#8.1</a>) функцию vf,  а производный класс derived также содержит функцию vf, то вызов  vf  для  объекта  класса  derived  вызывает  derived::vf.
Например:
<pre>
  struct base
    {
      virtual void vf ();
      void f ();
    };

   struct derived : public base
    {
      void vf ();
      void f ();
    };

  derived d;
  base* bp = &d;

  bp->vf ();
  bp->f ();
</PRE>
<BR>  Вызовы вызывают,  соответственно,    derived::vf  и  base::f  для
объекта класса  derived,  именованного  d.  Так  что  интерпретация
вызова виртуальной  функции зависит  от типа  объекта, для которого
она вызвана,  в то  время как  интерпретация  вызова  невиртуальной
функции зависит только от типа указателя, обозначающего объект.
<br>  Из  этого  следует,  что  тип  объектов  классов  с  виртуальными
функциями и  объектов классов,  выведенных из  таких классов, могут
быть определены во время выполнения.
<br>Если производный  класс имеет  член с  тем же  именем,  что  и  у
виртуальной функции  в базовом  классе, то  оба члена  должны иметь
одинаковый тип.  Виртуальная функция  не может быть другом (friend)
(<a HREF=#ref8.5.9>#8.5.9</a>). Функция  f в  классе, выведенном из класса, который имеет виртуальную  функцию   f,  сама  рассматривается  как  виртуальная.
Виртуальная  функция  в  базовом  классе  должна  быть  определена.
Виртуальная функция,  которая была  определена в базовом классе, не
нуждается  в  определении  в  производном  классе.  В  этом  случае
функция, определенная  для базового  класса, используется  во  всех
вызовах.
<a name=ref8.5.5>
<h4 align=center>   8.5.5 Конструкторы</h4>
<p>  Член функция с именем, совпадающим с именем ее класса, называется
конструктором. Конструктор не имеет типа возвращаемого значения; он
используется для  конструирования значений  с типом  его класса.  С
помощью  конструктора  можно  создавать  новые  объекты  его  типа,
используя синтаксис
<pre>
     typedef-имя ( список_параметров opt )
</PRE>
<BR>    Например,
<pre>
  complex zz = complex (1,2.3);

  cprint (complex (7.8,1.2));
</PRE>
<BR>  Объекты,  созданные   таким  образом,   не  имеют   имени   (если
конструктор не  использован как  инициализатор, как  это было  с zz
выше), и  их время  жизни ограничено  областью видимости, в которой
они созданы.  Они не  могут рассматриваться  как константы их типа.
Если класс  имеет конструктор, то он вызывается для каждого объекта
этого класса перед тем, как этот объект будет как-либо использован;
см. <a HREF=#ref8.6>#8.6.</a>
<br>  Конструктор может быть overload, но не virtual или friend.
<br>  Если класс  имеет базовый  класс  с конструктором, то конструктор
для  базового   класса  вызывается   до  вызова   конструктора  для
производного класса. Конструкторы для объектов членов, если таковые
есть,  выполняются   после  конструктора   базового  класса   и  до
конструктора объекта,  содержащего их.  Объяснение того,  как могут
быть специфицированы параметры для базового класса, см. в <a HREF=#ref8.6.2>#8.6.2</a>, а того,  как   конструкторы  могут   использоваться  для   управления свободной памятью, см. в <a HREF=ref9_18.htm#ref9_18.17>#17.</a>
<a name=ref8.5.6>
<h4 align=center>   8.5.6 Преобразования</h4>
<p>  Конструктор, получающий  один параметр,  определяет преобразование
из типа  своего параметра в тип своего класса. Такие преобразования
неявно   применяются   дополнительно   к   обычным   арифметическим
преобразованиям. Поэтому присваивание объекту из класса X допустимо,
если или  присваиваемое значение  является  X,  или  если  X  имеет
конструктор,  который  получает  присваиваемое  значение  как  свой
единственный параметр.  Аналогично  конструкторы  используются  для
преобразования параметров  функции (<a HREF=ref1_7.htm#ref1_7.7.1>#7.1</a>) и инициализаторов (<a HREF=#ref8.6>#8.6</a>).
Например:
<pre>
  class X { ... X (int); };
  f (X arg)
    {
      X a = 1;          /* a = X (1) */
      a = 2;            /* a = X (2) */
      f (3);            /* f (X (3)) */
    }
</PRE>
<BR>  Если для  класса X  не  найден  ни один  конструктор,  принимающий
присваиваемый  тип,   то  не   делается  никаких  попыток  отыскать
конструктор для  преобразования присваиваемого  типа в тип, который
мог бы быть приемлем для конструкторов класса  X. Например:
<pre>
  class X { ... X (int); };
  class X { ... Y (X); };

  Y a = 1;              /* недопустимо: Y (X (1)) не пробуется */
</pre>
<a name=ref8.5.7>
<h4 align=center>    8.5.7 Деструкторы</h4>
<p>  Функция член  класса cl  с именем  ~cl  называется  деструктором.
Деструктор не  возвращает никакого  значения и  не получает никаких
параметров;  он  используется  для  уничтожения  значений  типа  cl
непосредственно  перед   уничтожением   содержащего   их   объекта.
Деструктор не может быть overload, virtual или friend.
<p>  Деструктор для  базового  класса  выполняется  после  деструктора
производного  от  него  класса.  Как  деструкторы  используются  для
управления свободной памятью, см. объяснение в <a HREF=ref9_18.htm#ref9_18.17>#17.</a>
<a name=ref8.5.8>
<h4 align=center>     8.5.8 Видимость имен членов</h4>
<p>  Члены  класса,   описанные  с  ключевым  словом  class,  являются
закрытыми, это  значит, что  их имена  могут использоваться  только
функциями членами  (<a HREF=#ref8.5.2>#8.5.2</a>)   и друзьями (см. <a HREF=#ref8.5.10>#8.5.10</a>), пока они не
появятся после   метки public: . В этом случае они являются общими.
Общий член  может использоваться любой функцией. Структура является
классом, все члены которого общие; см. <a HREF=#ref8.5.11>#8.5.11.</a>
<br>  Если перед  именем базового класса в описании производного класса
стоит  ключевое  слово  public,  то  общие  члены  базового  класса
являются общими  для производного  класса; если нет, то они являются
закрытыми. Общий член mem закрытого базового класса base может быть
описан как общий для производного класса с помощью описания вида
<pre>
     typedef-имя . идентификатор;
</PRE>
<BR>  в котором  typedef-имя означает базовый класс, а идентификатор есть
имя члена  базового класса. Такое описание может появляться в общей
части производного класса.
<br>  Рассмотрим
<pre>
  class base
    {
      int a;
  public:
      int b,c;
      int bf ();
    };

  class derived : base
    {
      int d;
  public:
      base.c;
      int e;
      int df ();
    };

  int ef (derived&);
</PRE>
<BR>  Внешняя функция  ef может  использовать только  имена c,  e и df.
Являясь членом  derived, функция df может использовать имена b,  c,
bf, d,  e    и   df, но не a. Являясь членом base, функция bf может
использовать члены a, b, c  и  bf.
<a name=ref8.5.9>
<h4 align=center>    8.5.9 Друзья (friends)</h4>
<p>  Другом   класса   является   функция   не-член,   которая   может
использовать имена  закрытых членов.  Следующий пример иллюстрирует
различия между членами и друзьями:
<pre>
  class private
    {
      int a;
      friend void friend_set (private*,int);
  public:
      void member_set (int);
    };

  void friend_set (private* p,int i) { p->a=i; }

  void private.member_set (int i) { a = i; }

  private obj;

  friend_set (&obj,10);

  obj.member_set (10);
</PRE>
<BR>  Если  описание   friend  относится  к  перегруженному  имени  или
операции, то  другом становится  только функция с описанными типами
параметров. Все  функции класса  cl1 могут  быть  сделаны  друзьями
класса cl2 с помощью одного описания
<pre>
  class cl2
    {
      friend cl1;
      . . .
    };
</pre>
<a name=ref8.5.10>
<h4 align=center>    8.5.10 Функция операция</h4>
<p>   Большинство  операций могут  быть перегружены  с тем,  чтобы они
могли получать в качестве операндов объекты класса.
<pre>
      имя_функции_операции:   operator  op
    op:            +   -   *   /   %   ^   &   |   ~
                   !   =   <   >   +=  -=  *=  /=  %=
                   ^=  &=  |=  <<  >>  <<= >>= ==  !=
                   <=  >=  &&  ||  ++  --  ()  []
</PRE>
<BR>  Последние две  операции  -  это  вызов  функции  и  индексирование.
Функция операция  может или  быть функцией  членом, или получать по
меньшей мере один параметр класса. См. также <a HREF=ref1_7.htm#ref1_7.7.16>#7.16.</a>
<a name=ref8.5.11>
<h4 align=center>      8.5.11 Структуры</h4>
<p>  Структура есть класс, все члены которого общие. Это значит, что
<pre>
  struct s { ... };
</PRE>
<BR>эквивалентно
<pre>
  class s { public: ... };
</PRE>
<BR>  Структура может  иметь  функции  члены  (включая  конструкторы  и
деструкторы).
<a name=ref8.5.12>
<h4 align=center>     8.5.12 Объединения</h4>
<p>  Объединение можно  считать структурой,  все объекты члены которой
начинаются  со   смещения  0,   и  размер  которой  достаточен  для
содержания любого  из ее объектов членов. В каждый момент времени в
объединении может  храниться не  больше одного  из объектов  членов.
Объединение может  иметь  функции  члены  (включая  конструкторы  и
деструкторы).
<a name=ref8.5.13>
<h4 align=center>     8.5.13 Поля бит</h4>
<p>  Описатель члена вида
<pre>
     идентификатор opt:  константное_выражение
</PRE>
<BR>  определяет поле;  его длина  отделяется от  имени поля  двоеточием.
Поля упаковываются  в машинные целые; они не являются альтернативой
слов. Поле  , не влезающее в оставшееся в целом место, помещается в
следующее слово.  Поле не  может  быть  шире  слова.  На  некоторых
машинах  они  размещаются  справа  налево,  а  на  некоторых  слева
направо; см. <a HREF=ref1_7.htm#ref1_7.2.6>#2.6.</a>
<br>Неименованные поля полезны при заполнении для согласования внешне
предписанных размещений  (форматов). В особых случаях неименованные
поля длины  0 задают выравнивание следующего поля по границе слова.
Не требуется  аппаратной поддержки  любых полей, кроме целых. Более
того, даже  целые поля  могут рассматриваться как unsigned. По этим
причинам рекомендуется  описывать поля  как unsigned.  К  полям  не
может  применяться   операция  получения   адреса  &,  поэтому  нет
указателей на поля.
<br>  Поля не могут быть членами объединения.
<a name=ref8.5.14>
<h4 align=center>    8.5.14 Вложенные классы </h4>
<p>  Класс может  быть описан  внутри другого  класса. В  этом  случае
область  видимости   имен  внутреннего  класса  его  и  общих  имен
ограничивается   охватывающим   классом.   За   исключением   этого
ограничения допустимо,  чтобы внутренний  класс уже  был описан вне
охватывающего класса.  Описание одного  класса  внутри  другого  не
влияет на  правила доступа  к закрытым членам и не помещает функции
члены внутреннего  класса в область видимости охватывающего класса.
Например:
<pre>
  int x;

  class enclose   /* охватывающий */
    {
      int x;
      class inner
        {
          int y;
          f () { x=1 }
          ...
        };
      g (inner*);
      ...
    };

  int inner;  /* вложенный */

  enclose.g (inner* p) { ... }
</PRE>
<BR>  В этом  примере x  в f  ссылается на  x, описанный  перед классом
enclose. Поскольку  y является  закрытым членом  inner,  g не может
его использовать.  Поскольку g   является  членом  enclose,  имена,
использованные в  g, считаются  находящимися  в  области  видимости
класса enclose.   Поэтому inner в описании параметров g относится к
охваченному типу inner, а не к int.
<a name=ref8.6>
<h3 align=center>    8.6 Инициализация</h3>
<table border=0>
<tr><td width=10></td><TD>  <a HREF=#ref8.6.1>  8.6.1 Список инициализаторов </a>                    
<tr><td width=10></td><TD>  <a HREF=#ref8.6.2>  8.6.2 Классовые объекты          </a>               
<tr><td width=10></td><TD>  <a HREF=#ref8.6.3>  8.6.3 Ссылки                             </a>        
<tr><td width=10></td><TD>  <a HREF=#ref8.6.4>  8.6.4 Массивы символов         </a>                 
</table>
<p>  Описание   может   задавать   начальное   значение   описываемого
идентификатора. Инициализатору  предшествует =,  и  он  состоит  из
выражения или списка значений, заключенного в фигурные скобки.
<pre>
     инициализатор:
          =                                              expression
          =          {           список_инициализаторов           }
          =       {        список_инициализаторов        ,        }
          (                   список_выражений                    )

     список_инициализаторов                                       :
          выражение
          список_инициализаторов      ,      список_инициализаторов
          { список_инициализаторов }
</PRE>
<BR>    Все выражения в инициализаторе статической или внешней переменной
должны быть  константными выражениями,  которые описаны в <a HREF=ref9_18.htm#ref9_18.15>#15</a>  или
выражениями, которые сводятся к адресам ранее описанных переменных,
возможно со  смещением на  константное выражение.  Автоматические и
регистровые переменные могут инициализироваться любыми выражениями,
включающими константы, ранее описанные переменные и функции.
<br>  Гарантируется, что  неинициализированные  статические  и  внешние
переменные  получают   в  качестве   начального  значения   "пустое
значение"<a href=#*r.1>*<sup>1</sup></a>. Когда  инициализатор применяется  к скаляру  (указатель или объект  арифметического типа),  он состоит из одного выражения,
возможно, заключенного  в  фигурные  скобки.  Начальное    значение
объекта находится  из выражения;  выполняются те же преобразования,
что и при присваивании.
<br>  Заметьте, что  поскольку ()  не является  инициализатором, то  "X
a();" является  не описанием объекта класса X, а описанием функции,
не получающей значений и возвращающей X.
<a name=ref8.6.1>
<h4 align=center>      8.6.1 Список инициализаторов</h4>
<p>  Когда описанная переменная является составной (класс или массив),
то инициализатор  может состоять из заключенного в фигурные скобки,
разделенного запятыми  списка инициализаторов для членов составного
объекта, в  порядке возрастания индекса или по порядку членов. Если
массив содержит  составные подобъекты,  то это  правило  рекурсивно
применяется к  членам составного подобъекта. Если инициализаторов в
списке меньше,  чем членов  в составном  подобъекте,  то  составной
подобъект дополняется нулями.
<br>  Фигурные  скобки   могут  опускаться   следующим  образом.   Если
инициализатор начинается  с левой фигурной скобки, то следующий  за
ней список инициализаторов инициализирует члены составного объекта;
наличие  числа   инициализаторов,  большего,   чем  число   членов,
считается ошибочным.  Если, однако,  инициализатор не  начинается с
левой фигурной  скобки,  то  из  списка  берутся  только  элементы,
достаточные для  сопоставления членам  составного  объекта,  частью
которого является текущий составной объект.
<br>  Например,
<pre>
  int x[] = { 1, 3, 5 };
</PRE>
<BR>описывает и  инициализирует x  как одномерный  массив, имеющий  три
члена, поскольку размер не был указан и дано три инициализатора.
<pre>
  float y[4][3] =
      {
        { 1, 3, 5 },
        { 2, 4, 6 },
        { 3, 5, 7 }
      };
</PRE>
<BR>является полностью  снабженной квадратными скобками инициализацией:
1,3 и 5 инициализируют  первый ряд массива y[0], а именно, y[0][2].
Аналогично, следующие  две строки  инициализируют    y[1]  и  y[2].
Инициализатор заканчивается  раньше, поэтому  y[3] инициализируется
значением    0.  В точности  тот же  эффект может  быть достигнут с
помощью
<pre>
  float y[4][3] =
    {
      1, 3, 5, 2, 4, 6, 3, 5, 7
    };
</PRE>
<BR>  Инициализатор для  y начинается  с левой  фигурной скобки,  но не
начинается с  нее инициализатор  для y[0], поэтому используется три
значения из  списка. Аналогично, следующие три успешно используются
для y[1] и следующие три для y[2].
<pre>
  float y[4][3] = { { 1 }, { 2 }, { 3 }, { 4 } };
</PRE>
<BR>инициализирует   первый столбец  y (рассматриваемого  как двумерный
массив) и оставляет остальные элементы нулями.
<a name=ref8.6.2>
<h4 align=center>    8.6.2 Классовые объекты</h4>
<p>  Объект с  закрытыми членами  не может быть инициализован с помощью
простого присваивания, как это описывалось выше; это же относится к
объекту объединение.  Если класс  имеет конструктор,  не получающий
значений, то  этот конструктор  используется для  объектов, которые
явно не инициализированы.
<br>  Параметры для  конструктора могут  также быть представлены в виде
заключенного в круглые скобки списка. Например:
<pre>
  struct complex
    {
      float re;
      float im;
      complex (float r,float i) { re=r; im=i; }
      complex (float r) { re=r; im=0; }
    };

  complex zz (1,2.3);
  complex* zp = new complex (1,2.3);
</PRE>
<BR>  Инициализация  может   быть  также  выполнена  с  помощью  явного
присваивания; преобразования производятся. Например,
<pre>
  complex zz1 = complex (1,2.3);
  complex zz2 = complex (123);
  complex zz3 = 123;
  complex zz4 = zz3;
</PRE>
<BR>  Если конструктор  ссылается на объект своего собственного класса,
то он  будет вызываться  при инициализации  объекта другим объектом
этого класса, но не при инициализации объекта конструктором.
<br>  Объект  класса,   имеющего  конструкторы,   может   быть   членом
составного объекта  только если  он сам  не имеет  конструктора или
если его  конструкторы не  имеют  параметров.  В  последнем  случае
конструктор вызывается  при создании  составного объекта. Если член
составного объекта  является членом класса с деструкторами, то этот
деструктор вызывается при уничтожении составного объекта.
<a name=ref8.6.3>
<h4 align=center>   8.6.3 Ссылки</h4>
<p>  Когда переменная  описана как T&, что есть "ссылка на тип T", она
может быть   инициализирована или указателем на тип T, или объектом
типа T.  В последнем  случае будет неявно применена операция взятия
адреса &. Например:
<pre>
  int i;
  int& r1 = i;
  int& r2 = &i;
</PRE>
<BR>И r1 и r2 будут указывать на i.
<br>  Обработка инициализации  ссылки очень сильно зависит от того, что
ей  присваивается.   Как  описывалось   в   <a HREF=ref1_7.htm#ref1_7.7.1>#7.1</a>,   ссылка   неявно
переадресуется при ее использовании. Например
<pre>
  r1 = r2;
</PRE>
<BR>означает копирование  целого, на  которое указывает r2, в целое, на
которое указывает r1.
<br>  Ссылка должна  быть инициализована.  Таким образом,  ссылку можно
считать именем объекта.
<br>  Чтобы получить указатель pp, обозначающий тот объект, что и ссылка
rr, можно  написать pp=&rr.    Это  будет  проинтерпретировано  как
pp=&*rr.
<br>  Если инициализатор  для ссылки  на тип  T  не  является  адресным
выражением, то  будет  создан  и  инициализован  с  помощью  правил
инициализации объект  типа T.  Тогда значением  ссылки станет адрес
объекта. Время  жизни объекта,  созданного таким  способом, будет в
той области видимости, в которой он создан. Например:
<pre>
  double& rr = 1;
</PRE>
<BR>допустимо, и  rr будет  указывать на  объект типа double, в котором
хранится значение 1.0.
<br>  Ссылки особенно полезны в качестве типов параметров.
<a name=ref8.6.4>
<h4 align=center>   8.6.4 Массивы символов</h4>
<p>  Последняя сокращенная  запись позволяет  инициализировать строкой
массив данных  типа char.  В этом  случае последовательные  символы
строки инициализируют члены массива. Например:
<pre>
  char msg[] = "Syntax error on line %d\n";
</PRE>
<BR>демонстрирует  массив  символов,  члены  которого  инициализированы
строкой.
<a name=ref8.7>
<h3 align=center>   8.7 Имена типов</h3>
<p>  Иногда (для  неявного задания  преобразования типов  и в качестве
параметра sizeof  или new)  нужно использовать имя типа данных. Это
выполняется при  помощи  "имени  типа"  которое  по  сути  является
описанием для объекта этого типа, в котором опущено имя объекта.
<pre>
     имя_типа:
          спецификатор_типа абстрактный_описатель
     абстрактный_описатель                                        :
          пустой
          *                                   абстрактный_описатель
          абстрактный_описатель    (  списоко_писателей_параметров)
          абстрактный_описатель    [  константное_выражение  opt  ]
          ( абстрактный_описатель )
</PRE>
<BR>    Является     возможным      идентифицировать     положение      в
абстрактном_описателе, где должен был бы появляться идентификатор в
случае, если  бы конструкция  была  описателем  в  описании.  Тогда
именованный  тип   является  тем  же,  что  и  тип  предполагаемого
идентификатора. Например:
<pre>
  int
  int *
  int *[3]
  int *()
  int (*)()
</PRE>
<BR>именует,  соответственно,   типы  "целое",   "указатель  на  целое",
"указатель  на   массив  из  трех  целых",  "функция,  возвращающая
указатель на функцию, возвращающую целое" и "указатель на целое".
<br>  Простое  имя   типа  есть   имя   типа,   состоящее   из   одного
идентификатора или ключевого слова.
<pre>
     простое_имя_типа:
          typedef-имя
          char
          short
          int
          long
          unsigned
          float
          double
</PRE>
<BR>    Они используются  в альтернативном  синтаксисе для преобразования
типов. Например:
<pre>
  (double) a
</PRE>
<BR>может быть также записано как
<pre>
  double (a)
</pre>
<a name=ref8.8>
<h3 align=center>   8.8 Определение типа typedef</h3>
<p>  Описания, содержащие  спецификатор_описания  typedef,  определяют
идентификаторы, которые  позднее могут  использоваться так, как если
бы  они   были  ключевыми  словами  типа,  именующее  основные  или
производные типы.
<pre>
     typedef-имя:
          идентификатор
</PRE>
<BR>    Внутри области  видимости описания,  содержащего typedef,  каждый
идентификатор,  возникающий   как  часть   какого-либо   описателя,
становится в этом месте синтаксически эквивалентным ключевому слову
типа, которое  именует тип, ассоциированный с идентификатором таким
образом, как  описывается в <a HREF=#ref8.4>#8.4.</a> Имя класса или перечисления также
является typedef-именем. Например, после
<pre>
  typedef int MILES, *KLICKSP;
  struct complex { double re, im; };
</PRE>
<BR>каждая из конструкций
<pre>
  MILES distance;
  extern KLICKSP metricp;
  complex z, *zp;
</PRE>
<BR>является допустимым  описанием; distance  имеет  тип  int,  metricp
имеет тип "указатель на int".
<br>  typedef   не вводит  новых типов,  но только  синонимы для типов,
которые могли  бы быть  определены другим  путем. Так в приведенном
выше примере  distance рассматривается  как имеющая в точности тот
же тип, что и любой другой int объект.
<br>  Но описание класса вводит новый тип. Например:
<pre>
  struct X { int a; };
  struct Y { int a; };
  X a1;
  Y a2;
  int a3;
</PRE>
<BR>описывает три переменных трех различных типов.
<br>  Описание вида
<pre>
     описание_имени:
          агрег                   идентификатор                   ;
          enum  идентификатор ;
</PRE>
<BR>  определяет  то,   что  идентификатор   является  именем  некоторого
(возможно, еще  не определенного)  класса или  перечисления.  Такие
описания позволяют  описывать классы,  ссылающихся друг  на  друга.
Например:
<pre>
  class vector;
  class matrix
    {
      ...
      friend matrix operator* (matrix&,vector&);
    };

  class vector
    {
      ...
      friend matrix operator* (matrix&,vector&);
    };
</pre>
<a name=ref8.9>
<h3 align=center>  8.9 Перегруженные имена функций</h3>
<p>  В тех  случаях,  когда  для  одного  имени  определено  несколько
(различных) описаний функций, это имя называется перегруженным. При
использовании этого  имени правильная  функция выбирается с помощью
сравнения  типов  фактических  параметров  с  типами  параметров  в
описаниях функций.  К  перегруженным  именам  неприменима  операция
получения адреса &.
<br>  Из обычных  арифметических преобразований,  определенных в  <a HREF=ref1_7.htm#ref1_7.6.6>#6.6</a>,
для    вызова     перегруженной    функции    выполняются    только
char->short->int, int->double, int->long и float->double. Для того,
чтобы перегрузить  имя функции  не-члена описание  overload  должно
предшествовать любому описанию функции; см. <a HREF=#ref8.2>#8.2.</a>
<br>  Например:
<pre>
  overload abs;
  int abs (int);
  double abs (double);
</PRE>
<BR>  Когда  вызывается  перегруженное  имя,  по  порядку  производится
сканирование списка  функций для нахождения той, которая может быть
вызвана. Например,  abs(12) вызывает  abs(int), а  abs(12.0)  будет
вызывать abs(double). Если бы был зарезервирован порядок вызова, то
оба обращения вызвали бы abs(double).
<br>  Если   в   случае   вызова   перегруженного   имени   с   помощью
вышеуказанного метода  не найдено  ни одной функции,  и если функция
получает параметр типа класса, то конструкторы классов параметров (в
этом случае существует единственный  набор преобразований, делающий
вызов допустимым) применяются неявным образом. Например:
<pre>
  class X { ... X (int); };
  class Y { ... Y (int); };
  class Z { ... Z (char*); };

  overload int f (X), f (Y);
  overload int g (X), g (Y);

  f (1);        /* неверно: неоднозначность f(X(1)) или f(Y(1)) */
  g (1);        /* g(X(1))                              */
  g ("asdf");   /* g(Z("asdf"))                         */
</PRE>
<BR>Все    имена    функций    операций    являются    автоматически
перегруженными.
<a name=ref8.10>
<h3 align=center>   8.10 Описание перечисления</h3>
<p>  Перечисления являются int с именованными константами.
<pre>
     enum_спецификатор:
          enum    идентификатор     opt     {     enum_список     }

     enum_список:
          перечислитель
          enum_список,                                перечислитель

     перечислитель:
          идентификатор
          идентификатор = константное_выражение
</PRE>
<BR>    Идентификаторы  в  enum-списке  описаны  как  константы  и  могут
появляться  во  всех  местах,  где  требуются  константы.  Если  не
появляется  ни   одного  перечислителя   с  =,   то  значения  всех
соответствующих констант  начинаются с  0 и возрастают на 1 по мере
чтения   описания   слева   направо.   Перечислитель   с   =   дает
ассоциированному   с   ним   идентификатору   указанное   значение;
последующие идентификаторы  продолжают прогрессию  от присвоенного
значения.
<br>  Имена  перечислителей  должны  быть  отличными  от  имен  обычных
переменных. Значения  перечислителей  не  обязательно  должны  быть
различными.
<br>  Роль     идентификатора      в     спецификаторе     перечисления
enum_спецификатор  полностью   аналогична  роли  имени  класса;  он
именует определенный нумератор. Например:
<pre>
  enum color { chartreuse, burgundy, claret=20, winedark };
    ...
    color *cp, col;
    ...
    col = claret;
    cp = &col;
    ...
    if (*cp == burgundy) ...
</PRE>
<BR>делает color  именем типа, описывающего  различные  цвета,  и  затем
описывает cp как указатель на объект этого типа. Возможные значения
извлекаются из множества { 0, 1, 20, 21 }.
<a name=ref8.11>
<h3 align=center>   8.11 Описание Asm </h3>
<p>  Описание Asm имеет вид
<pre>
    asm (строка);
</PRE>
<BR>    Смысл описания  asm  не определен.  Обычно  оно  используется  для
передачи информации ассемблеру через компилятор.
<p><small>
<a name=*r.1>
*<sup>1</sup> В  английском "garbage",  означающее затертое  место  [памяти],
т.е. если  переменная  целая,  то  0,  если  char,  то  '\0',  если
указатель на Т, то (Т*) NULL.
</small>
<p> <center> <font size="-1">
[<a href="ref1_7.htm">Назад</a>]
[<a href="ref.htm">Содержание</a>]
[<a href="ref9_18.htm">Вперед</a>]
</font> 
<p>
<center><font size=1>
Copyright &copy <a href="cit.htm#1">CIT</a>
</font></center>
</body></html>
