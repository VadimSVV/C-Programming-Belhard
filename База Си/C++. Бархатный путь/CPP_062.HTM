<html><head>
<title>typedef-объявление</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="../../PICTURES/MENU/HEADER0.JPG" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="../../PICTURES/MENU/LOGO.GIF" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>
<h4>typedef-объявление</h4>
<p align=justify>На стадии компиляции производится полная идентификация типов всех входящих в программу выражений. Даже отсутствие имени типа в объявлении как, например,
<pre>unsigned long MMM;
// Вместо имени типа - комбинация модификаторов unsigned long.</pre>
<p align=justify>восстанавливается транслятором в соответствии с принятыми в C++ правилами умолчания.
<p align=justify>Помимо явного объявления типа в C++ предусмотрены дополнительные средства описания имён типов. Таким средством является typedef-объявление. С его помощью в программу можно ввести новые имена, которые затем используются для обозначения производных и основных типов.
<p align=justify>typedef-объявление - это инструмент объявления. Средство ввода новых имён в программу, средство замены громоздких последовательностей имён в объявлениях (но не определениях!) новыми именами.
<p align=justify>Синтаксис typedef-объявления как подмножества объявления представляется внушительным списком форм Бэкуса-Наура. Но при известной степени концентрации это нагромождение БНФ всё же можно разобрать:
<pre><u>Объявление</u> ::= [<u>СписокСпецификаторовОбъявления</u>][<u>СписокОписателей</u>];
<u>СписокСпецификаторовОбъявления</u> ::=
              <u>СпецификаторОбъявления</u> [<u>СписокСпецификаторовОбъявления</u>]
<u>СпецификаторОбъявления</u> ::= typedef
                       ::= *****
<u>СписокОписателей</u> ::=
                   [<u>СписокОписателей</u>,] <u>ОписательИнициализатор</u>
<u>ОписательИнициализатор</u> ::= <u>Описатель</u> [Инициализатор]
<u>Описатель</u> ::= <u>dИмя</u>
          ::= *****
<u>dИмя</u> ::= <u>Имя</u>
     ::= <u>ОписанноеИмяТипа</u>
     ::= *****
<u>ОписанноеИмяТипа</u> ::= Идентификатор
<u>СписокСпецификаторовТипа</u> ::=
                    <u>СпецификаторТипа</u> [<u>СписокСпецификаторовТипа</u>]
<u>СпецификаторТипа</u> ::= <u>ИмяПростогоТипа</u>
                 ::= <u>СпецификаторКласса</u>
                 ::= *****</pre>
<p align=justify>Таким образом, typedef-объявление является объявлением, которое начинается спецификатором typedef и состоит из последовательностей разнообразных спецификаторов объявления и описателей. Список описателей (элементы списка разделяются запятыми) может содержать языковые конструкции разнообразной конфигурации. В него могут входить описатели (в конце концов, это всего лишь разнообразные имена) с символами ptrОпераций (* и &amp;), описатели, заключённые в круглые скобки, описатели в сопровождении заключённых в скобки списков объявлений параметров, описателей const и volatile, а также заключённых в квадратные скобки константных выражений (последние, надо полагать, предназначены для спецификации массивов).
<p align=justify>В качестве примера рассмотрим, следующее typedef-объявление:
<pre>typedef int Step, *pInteger;</pre>
<p align=justify>Это объявление начинается спецификатором typedef, содержит спецификатор объявления int и список описателей, в который входит два элемента: имя Step и имя pInteger, перед которым стоит символ ptrОперации *.
<p align=justify>Объявление эквивалентно паре typedef-объявлений следующего вида:
<pre>typedef int Step;
typedef int *pInteger;</pre>
<p align=justify>В соответствии с typedef-объявлениями, транслятор производит серию подстановок, суть которых становится понятной из анализа примера, в котором пара операторов объявления
<pre>Step StepVal;
extern pInteger pVal;</pre>
<p align=justify>заменяется следующими объявлениями:
<pre>int StepVal;
extern int * pVal;</pre>
<p align=justify>На основе этого примера можно попытаться воспроизвести алгоритм подстановки:
	<ul>
	<li>после возможного этапа декомпозиции списка описателей typedef-объявления, в результате которого может появиться новая серия typedef-объявлений, транслятор переходит к анализу операторов объявлений;
	<li>в очередном операторе объявления выделяется идентификатор, стоящий на месте спецификатора объявления;
	<li>среди typedef-объявлений производится поиск соответствующего объявления, содержащего вхождение этого идентификатора в список описателей. Таким образом, транслятор находит соответствующий контекст для подстановки. Мы будем называть этот контекст контекстом замены. Контекст замены оказывается в поле зрения транслятора вместе с оператором объявления, в котором транслятор различает спецификатор объявления и описатель;
	<li>оператор объявления заменяется контекстом замены, в котором совпадающий со спецификатором объявления идентификатор заменяется соответствующим описателем.
	</ul>
<p align=justify>Если в программе присутствует typedef-объявление
<pre>typedef char* (*PPFF) (int,int,int*,float);</pre>
<p align=justify>то компактное объявление функции
<pre>PPFF ReturnerF(int, int);</pre>
<p align=justify>преобразуется при трансляции в сложное, но как мы далее увидим, абсолютно корректное объявление:
<pre>char* (*ReturnerF(int, int))(int,int,int*,float);</pre>
<p align=justify>При этом по идентификатору PPFF в прототипе функции находится контекст замены char* (*PPFF) (int,int,int*,float), в котором замещаемый описатель PPFF заменяется замещающим описателем ReturnerF(int, int).
<p align=justify>Цель достигнута. Простое становится сложным. И как хорошо, что всё это происходит без нашего участия! Перед нами очередное средство для "облегчения" труда программиста.
<p align=justify>Заметим, что подстановка возможна и в том случае, когда замещаемый описатель заменяется пустым замещающим описателем.
<p align=justify>То же самое typedef-объявление позволяет построить следующее объявление функции:
<pre>void MyFun (int, int, int*, float, PPFF);</pre>
<p align=justify>Рассмотрим ещё один пример.
<pre>typedef long double NewType;
/*
Используем спецификатор для ввода в программу нового имени типа.
*/
:::::
NewType MyFloatVal;</pre>
<p align=justify>Новое имя для обозначения типа введено…
<p align=justify>Новое имя ранее уже поименованного типа называют ОПИСАННЫМ ИМЕНЕМ ТИПА. Именно таким образом и назывался (так выглядел) соответствующий нетерминальный символ во множестве БНФ, связанных с typedef-объявлением.
<p align=justify>Описанное имя типа может заменять прежнее имя типа везде, где это возможно, поскольку объявления с описанным именем при трансляции заменяется первоначальным объявлением:
<pre>long double MyFloatVal;</pre>
<p align=justify>В ряде случаев описанное имя типа может оказаться единственным именем для обозначения безымянного типа (об этом позже).
<p align=justify>В области действия объявления имени типа (typedef-объявления), идентификатор NewType (он является спецификатором типа) становится синонимом другого спецификатора типа - конструкции long double. Иногда подобным образом вводимый синоним называют замещающим идентификатором.
<p align=justify>Использование спецификатора typedef подчиняется следующим правилам (ничто не даётся даром):
<p align=justify>1. Спецификатор typedef может переопределять имя как имя типа, даже если это имя само уже было ранее введено typedef спецификатором:
<pre>typedef int I;
typedef I I;</pre>
<p align=justify>2. Спецификатор typedef не может переопределять имя типа, объявленное в одной и той же области действия, и замещающее имя другого типа.
<pre>typedef int I;
typedef float I; // Ошибка: повторное описание…</pre>
<p align=justify>3. На имена, введённые в программу с помощью спецификатора typedef, распространяются правила области действия, за исключением разрешения на многократное использование имени (правило 1.).
<center>
<p><font size="-1"><a href="CPP_061.HTM">Назад</a> |
 <a href=INDEX.HTM>Содержание</a> |
 <a href="CPP_063.HTM">Вперед</a>
</font></center>
<p>&nbsp;
<table cellspacing=0 cellpadding=0 border=0 background="../../PICTURES/MENU/FOOTER0.JPG" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table></body></html>
