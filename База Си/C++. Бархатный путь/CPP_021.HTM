<html><head>
<title>Ёлементы программного модул€</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="../../PICTURES/MENU/HEADER0.JPG" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="../../PICTURES/MENU/LOGO.GIF" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">—ервер поддерживаетс€<br><a class="plain" href="http://www.citmgu.ru">÷ентром »нформационных “ехнологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">—ервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>
<h4>Ёлементы программного модул€</h4>
<p align=justify>ћы переходим к описанию синтаксиса элементов программного модул€, но, прежде всего, определим ещЄ одну категорию спецификаторов объ€влени€.
<pre>
<u>—пецификаторќбъ€влени€</u> ::= <u>fct—пецификатор</u>
                       ::= *****
<u>fct—пецификатор</u> ::= inline
                ::= virtual
</pre>
<p align=justify>fct—пецификатор используетс€ при объ€влении и определении функций. »х назначение ещЄ будет обсуждатьс€ в дальнейшем.
<pre>
<u>Ёлементѕрограммногоћодул€</u> ::= <u>—писок»нструкцийѕрепроцессора</u>
                          ::= <u>—писокќператоров</u>
<u>—писокќператоров</u> ::= [<u>—писокќператоров</u>] <u>ќператор</u>
<u>ќператор</u> ::= <u>ќператорќбъ€влени€</u>
         ::= *****
<u>ќператорќбъ€влени€</u> ::= <u>ќбъ€вление</u>
<u>ќбъ€вление</u> ::= <u>ќбъ€вление‘ункции</u>
           ::= <u>ќпределение‘ункции</u>
           ::= *****
<u>ќбъ€вление‘ункции</u> ::=
               [<u>—писок—пецификаторовќбъ€влени€</u>]
                                           <u>ќписатель</u>
                                            [<u>—пецификаци€»сключени€</u>];
<u>ќпределение‘ункции</u> ::=
               [<u>—писок—пецификаторовќбъ€влени€</u>]
                                         <u>ќписатель</u>
                                          [<u>ctor»нициализатор</u>]
                                            [<u>—пецификаци€»сключени€</u>]
                                                          <u>“ело‘ункции</u>
<u>ќписатель</u> ::= <u>»м€ќписатель</u>
          ::= <u>ptrќпераци€ ќписатель</u>
          ::= <u>ќписатель</u> (<u>—писокќбъ€вленийѕараметров</u>)
          ::= <u>ќписатель</u> [[<u> онстантное¬ыражение</u>]]
          ::= (<u>ќписатель</u>)
<u>»м€ќписатель</u> ::= <u>»м€</u>
             ::= *****
<u>ptrќпераци€</u> ::= * [<u>—писокCVќписателей</u>]
           ::= &amp; [<u>—писокCVќписателей</u>]
<u>—писокCVќписателей</u> ::= <u>CVќписатель</u> [<u>—писокCVќписателей</u>]
<u>CVќписатель</u> ::= const | volatile
<u>ctor»нициализатор</u> ::= *****
<u>—пецификаци€»сключени€</u> ::= *****
</pre>
<p align=justify>ќ последних двух нетерминалах позже.
<pre><u> онстантное¬ыражение</u> ::= <u>”словное¬ыражение</u></pre>
<p align=justify>—войства константного выражени€ мы также обсудим позже.
<pre>
<u>”словное¬ыражение</u> ::= *****</pre>
<u>—писокќбъ€вленийѕараметров</u> ::= [<u>—писокќбъ€вленийѕарам</u>] [...]
                           ::= <u>—писокќбъ€вленийѕарам</u>, ...
</pre>
<p align=justify>—ледует обратить особое внимание на последнюю ЅЌ‘. ¬ ней зафиксировано различие между двум€ нетерминалами. “ак что <u>—писокќбъ€вленийѕараметров</u> - совсем не то, что <u>—писокќбъ€вленийѕарам</u>. «десь нет никаких опечаток или ошибок. ѕервый нетерминал по смыслу шире второго. “ри точечки, заключЄнные в круглые скобочки (...) уже в определЄнном контексте можно рассматривать как <u>—писокќбъ€вленийѕараметров</u>, но это никак не <u>—писокќбъ€вленийѕарам</u>. Ёто как раз тот самый случай, когда к нетерминалам имеет смысл относитс€ как к —»ћ¬ќЋјћ, а не как к последовательност€м подчЄркнутых слов.
<pre>
<u>—писокќбъ€вленийѕарам</u> ::= <u>ќбъ€влениеѕараметра</u>
                     ::= [<u>—писокќбъ€вленийѕарам</u>,] <u>ќбъ€влениеѕараметра</u>
<u>ќбъ€влениеѕараметра</u> ::= 
                        <u>—писок—пецификаторовќбъ€влени€ ќписатель</u>
                    ::= <u>—писок—пецификаторовќбъ€влени€</u>
                                                  <u>ќписатель</u>
                                                        <u>»нициализатор</u>
                    ::= 
                        <u>—писок—пецификаторовќбъ€влени€</u>
                                               [<u>јбстрактныйќписатель</u>]
                                                      [<u>»нициализатор</u>]
<u>јбстрактныйќписатель</u> ::= <u>ptrќпераци€</u> [<u>јбстрактныйќписатель</u>]
                     ::= [<u>јбстрактныйќписатель</u>]
                               (<u>—писокќбъ€вленийѕараметров</u>)
                                                 [<u>—писокCVќписателей</u>]
                  ::= [<u>јбстрактныйќписатель</u>] [[<u> онстантное¬ыражение</u>]]
                     ::= (<u>јбстрактныйќписатель</u>)
</pre>
<p align=justify>ЅЌ‘, раскрывающа€ смысл нетерминала <u>јбстрактныйќписатель</u>, также проста, как и все прочие ЅЌ‘. ƒостаточно беглого взгл€да, чтобы пон€ть, что в роли этого самого абстрактного описател€ могут выступать операции *, &amp;, даже пара символов [], между которыми может располагатьс€ константное выражение. јбстрактный описатель можно также поместить в круглые скобки.
<p align=justify>≈сли обычный описатель предполагает какое-либо им€, то абстрактный описатель предназначаетс€ дл€ обозначени€ неименованных (безым€нных) сущностей.
<pre>
<u>“ело‘ункции</u> ::= <u>—оставнойќператор</u>
<u>—оставнойќператор</u> ::= {[<u>—писокќператоров</u>]}
</pre>
<p align=justify>‘игурные скобочки - характерный признак составного оператора.
<pre>
<u>—писокќператоров</u> ::= <u>ќператор</u>
                 ::= <u>—писокќператоров ќператор</u>
<u>ќператор</u> ::= <u>ќператорќбъ€влени€</u>
         ::= *****
<u>—писок»нструкцийѕрепроцессора</u> ::= 
                                  [<u>—писок»нструкцийѕрепроцессора</u>]
                                              <u>»нструкци€ѕрепроцессора</u>
<u>»нструкци€ѕрепроцессора</u> ::= #
                        ::= <u>ћакроопределение</u>
                        ::= <u>‘ункциональноећакроопределение</u>
                        ::= *****
<u>ћакроопределение</u> ::= #define »дентификатор <u>—трокаЋексем</u>
<u>‘ункциональноећакроопределение</u> ::=
           #define »дентификатор (<u>—писок»дентификаторов</u>) <u>—трокаЋексем</u>
<u>—писок»дентификаторов</u> ::= »дентификатор
                      ::= <u>—писок»дентификаторов</u>, »дентификатор
<u>—трокаЋексем</u> ::= Ћексема
             ::= <u>—трокаЋексем</u> Ћексема
</pre>
<p align=justify>—оставной оператор также называют блоком операторов (или просто блоком).
<p align=justify>Ќесмотр€ на значительное количество пропусков в приведЄнных выше ЅЌ‘, содержащейс€ в них информации о синтаксисе программного модул€ вполне достаточно дл€ реконструкции его общей структуры.
<p align=justify>—ейчас мы рассмотрим структуру модул€. Ќа содержательную часть этой "программы" можно не обращать никакого внимани€. —ейчас важен лишь синтаксис.
<pre>
<u>—писок»нструкцийѕрепроцессора</u>
<u>—писокќператоров</u>
<u>ћакроопределение</u>
<u>ќператор</u>
<u>ќператор</u>
<u>ќператор</u>
<u>ќператор</u>
#define »дентификатор <u>—трокаЋексем</u>
<u>ќбъ€влениеѕеременной</u>
<u>ќбъ€вление‘ункции</u>
<u>ќпределение‘ункции</u>
<u>ќпределение‘ункции</u>
#define IdHello "HelloЕ"
int *pIntVal[5];
/*
ќбъ€влена переменна€ типа массив указателей размерности 5 на объекты типа int с именем pIntVal.
*/
<u>—пецификаторќбъ€влени€ ќписатель</u>;
<u>—пецификаторќбъ€влени€ ќписатель “ело‘ункции</u>
<u>—пецификаторќбъ€влени€ ќписатель “ело‘ункции</u>
#define IdHello "HelloЕ"
int *pIntVal[5];
int <u>ќписатель</u> (<u>—писокќбъ€вленийѕараметров</u>);
float <u>ќписатель</u> (<u>—пецификаторќбъ€влени€ »м€</u> ) <u>“ело‘ункции</u>
unsigned int MyFun2 (int Param1, ...) <u>—оставнойќператор</u>
#define IdHello "HelloЕ"
int *pIntVal[5];
int MyFun1 (
<u>—пецификаторќбъ€влени€</u> ,
<u>—пецификаторќбъ€влени€ јбстрактныйќписатель »нициализатор</u>,
           );
float MyFun2 (<u>—пецификаторќбъ€влени€ »м€ќписатель</u>)
                                                  <u>“ело‘ункции</u>
unsigned int MyFun3 (int Param1, ...) {<u>—писокќператоров</u>}
#define IdHello "HelloЕ"
int *pIntVal[5];
int MyFun1 (float, int *[5] = pIntVal);
/*
ќбъ€вление функции. ¬ объ€влении второго параметра используетс€
абстрактный описатель - он описывает нечто абстрактное, а, главное,
безым€нное, вида *[5]. —уд€ по спецификатору объ€влени€ int,
расположенному перед описателем, "нечто" подобно массиву указателей
на объекты типа int из п€ти элементов (подробнее о массивах после).
» эта безым€нна€ сущность инициализируетс€ с помощью инициализатора.
—ейчас нам важно проследить формальные принципы построени€ программного
модул€. ѕрочие детали будут подробно обсуждены ниже.
*/
float MyFun2 (char chParam1)
        {
         <u>—писокќператоров</u>
        }
unsigned int MyFun3 (int Param1, Е)
        {<u>—писокќператоров</u>}
#define IdHello "HelloЕ"
int *pIntVal[5];
int MyFun1 (float, int *[5] = pIntVal); // ќбъ€вление функции.
// ќпределены две функцииЕ
float MyFun2 (char chParam1)
        {
         extern int ExtIntVal;
         char *charVal;
        }
unsigned int MyFun3 (int Param1, Е)
               {
                const float MMM = 233.25;
                int MyLocalVal;
               }
</pre>
<p align=justify>“олько что на основе ЅЌ‘ было построено множество предложений, образующих программный модуль. ‘актически, наша перва€ программа ничего не делает. ¬сего лишь несколько примеров бесполезных объ€влений и никаких алгоритмов. “ем не менее, этот пример показывает, что в программе нет случайных элементов.  аждый символ, каждый идентификатор программы играет строго определЄнную роль, имеет собственное название и место в программе. » в этом и состоит основна€ ценность этого примера.
<p align=justify>»так, наш первый программный модуль представл€ет собой множество инструкций препроцессора и операторов. „асть операторов играет роль объ€влений. — их помощью кодируетс€ необходима€ дл€ трансл€тора информаци€ о свойствах объектов. ƒруга€ часть операторов €вл€етс€ определени€ми и предполагает в ходе выполнени€ программы совершение разнообразных действий (например, создание объектов в различных сегментах пам€ти).
<p align=justify>ѕосле трансл€ции модул€ предложени€ €зыка преобразуютс€ во множество команд процессора. ѕри всЄм различии операторов €зыка и команд процессора, трансл€ци€ правильно написанной программы обеспечивает точную передачу заложенного в исходный текст программы смысла (или семантики операторов). ѕрограммист может следить за ходом выполнени€ программы по операторам программы на C++, не обраща€ внимани€ на то, что процессор в это врем€ выполн€ет собственные последовательности команд.
<p align=justify>— процессом выполнени€ программы св€зана своеобразна€ система пон€тий.  огда говор€т, что в программе управление передаЄтс€ какому-либо оператору, то имеют в виду, что в исполнительном модуле процессор приступил к выполнению множества команд, соответствующих данному оператору.
<center>
<p><font size="-1"><a href="CPP_020.HTM">Ќазад</a> |
 <a href=INDEX.HTM>—одержание</a> |
 <a href="CPP_022.HTM">¬перед</a>
</font></center>
<p>&nbsp;
<table cellspacing=0 cellpadding=0 border=0 background="../../PICTURES/MENU/FOOTER0.JPG" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table></body></html>
